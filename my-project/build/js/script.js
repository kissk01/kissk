!function(){"use strict";function e(e){return e&&e.__esModule?e.default:e}function t(e,t){return t={exports:{}},e(t,t.exports),t.exports}var n="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},r=t(function(e){function t(e){return void 0===e||null===e}function r(e){return void 0!==e&&null!==e}function o(e){return!0===e}function i(e){return!1===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function a(e){return null!==e&&"object"==typeof e}function c(e){return mi.call(e).slice(8,-1)}function u(e){return"[object Object]"===mi.call(e)}function l(e){return"[object RegExp]"===mi.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function f(e){return null==e?"":"object"==typeof e?JSON.stringify(e,null,2):String(e)}function d(e){var t=parseFloat(e);return isNaN(t)?e:t}function h(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}function v(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}function m(e,t){return bi.call(e,t)}function y(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}function g(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function b(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function w(e,t){for(var n in t)e[n]=t[n];return e}function _(e){for(var t={},n=0;n<e.length;n++)e[n]&&w(t,e[n]);return t}function k(e,t,n){}function x(e,t){if(e===t)return!0;var n=a(e),r=a(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),i=Array.isArray(t);if(o&&i)return e.length===t.length&&e.every(function(e,n){return x(e,t[n])});if(o||i)return!1;var s=Object.keys(e),c=Object.keys(t);return s.length===c.length&&s.every(function(n){return x(e[n],t[n])})}catch(e){return!1}}function C(e,t){for(var n=0;n<e.length;n++)if(x(e[n],t))return n;return-1}function A(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}function $(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function S(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}function O(e){if(!Ni.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}function T(e){return"function"==typeof e&&/native code/.test(e.toString())}function E(e){ss.target&&as.push(ss.target),ss.target=e}function N(){ss.target=as.pop()}function P(e){return new cs(void 0,void 0,void 0,String(e))}function j(e,t){var n=e.componentOptions,r=new cs(e.tag,e.data,e.children,e.text,e.elm,e.context,n,e.asyncFactory);return r.ns=e.ns,r.isStatic=e.isStatic,r.key=e.key,r.isComment=e.isComment,r.fnContext=e.fnContext,r.fnOptions=e.fnOptions,r.fnScopeId=e.fnScopeId,r.isCloned=!0,t&&(e.children&&(r.children=B(e.children,!0)),n&&n.children&&(n.children=B(n.children,!0))),r}function B(e,t){for(var n=e.length,r=new Array(n),o=0;o<n;o++)r[o]=j(e[o],t);return r}function M(e,t,n){e.__proto__=t}function L(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];S(e,i,t[i])}}function I(e,t){if(a(e)&&!(e instanceof cs)){var n;return m(e,"__ob__")&&e.__ob__ instanceof vs?n=e.__ob__:hs.shouldConvert&&!Ji()&&(Array.isArray(e)||u(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new vs(e)),t&&n&&n.vmCount++,n}}function D(e,t,n,r,o){var i=new ss,s=Object.getOwnPropertyDescriptor(e,t);if(!s||!1!==s.configurable){var a=s&&s.get,c=s&&s.set,u=!o&&I(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=a?a.call(e):n;return ss.target&&(i.depend(),u&&(u.dep.depend(),Array.isArray(t)&&H(t))),t},set:function(t){var s=a?a.call(e):n;t===s||t!==t&&s!==s||(r&&r(),c?c.call(e,t):n=t,u=!o&&I(t),i.notify())}})}}function R(e,t,n){if(Array.isArray(e)&&p(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?(Gi("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):r?(D(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function U(e,t){if(Array.isArray(e)&&p(t))return void e.splice(t,1);var n=e.__ob__;if(e._isVue||n&&n.vmCount)return void Gi("Avoid deleting properties on a Vue instance or its root $data - just set it to null.");m(e,t)&&(delete e[t],n&&n.dep.notify())}function H(e){for(var t=void 0,n=0,r=e.length;n<r;n++)t=e[n],t&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&H(t)}function F(e,t){if(!t)return e;for(var n,r,o,i=Object.keys(t),s=0;s<i.length;s++)n=i[s],r=e[n],o=t[n],m(e,n)?u(r)&&u(o)&&F(r,o):R(e,n,o);return e}function q(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return r?F(r,o):o}:t?e?function(){return F("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function z(e,t){return t?e?e.concat(t):Array.isArray(t)?t:[t]:e}function V(e,t,n,r){var o=Object.create(e||null);return t?(G(r,t,n),w(o,t)):o}function W(e){for(var t in e.components)X(t)}function X(e){/^[a-zA-Z][\w-]*$/.test(e)||Gi('Invalid component name: "'+e+'". Component names can only contain alphanumeric characters and the hyphen, and must start with a letter.'),(yi(e)||Ei.isReservedTag(e))&&Gi("Do not use built-in or reserved HTML elements as component id: "+e)}function J(e,t){var n=e.props;if(n){var r,o,i,s={};if(Array.isArray(n))for(r=n.length;r--;)o=n[r],"string"==typeof o?(i=_i(o),s[i]={type:null}):Gi("props must be strings when using array syntax.");else if(u(n))for(var a in n)o=n[a],i=_i(a),s[i]=u(o)?o:{type:o};else Gi('Invalid value for option "props": expected an Array or an Object, but got '+c(n)+".",t);e.props=s}}function K(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(u(n))for(var i in n){var s=n[i];r[i]=u(s)?w({from:i},s):{from:s}}else Gi('Invalid value for option "inject": expected an Array or an Object, but got '+c(n)+".",t)}}function Y(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}function G(e,t,n){u(t)||Gi('Invalid value for option "'+e+'": expected an Object, but got '+c(t)+".",n)}function Z(e,t,n){function r(r){var o=ms[r]||bs;c[r]=o(e[r],t[r],n,r)}W(t),"function"==typeof t&&(t=t.options),J(t,n),K(t,n),Y(t);var o=t.extends;if(o&&(e=Z(e,o,n)),t.mixins)for(var i=0,s=t.mixins.length;i<s;i++)e=Z(e,t.mixins[i],n);var a,c={};for(a in e)r(a);for(a in t)m(e,a)||r(a);return c}function Q(e,t,n,r){if("string"==typeof n){var o=e[t];if(m(o,n))return o[n];var i=_i(n);if(m(o,i))return o[i];var s=ki(i);if(m(o,s))return o[s];var a=o[n]||o[i]||o[s];return r&&!a&&Gi("Failed to resolve "+t.slice(0,-1)+": "+n,e),a}}function ee(e,t,n,r){var o=t[e],i=!m(n,e),s=n[e];if(ie(Boolean,o.type)&&(i&&!m(o,"default")?s=!1:ie(String,o.type)||""!==s&&s!==Ci(e)||(s=!0)),void 0===s){s=te(r,o,e);var a=hs.shouldConvert;hs.shouldConvert=!0,I(s),hs.shouldConvert=a}return ne(o,e,s,r,i),s}function te(e,t,n){if(m(t,"default")){var r=t.default;return a(r)&&Gi('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"==typeof r&&"Function"!==oe(t.type)?r.call(e):r}}function ne(e,t,n,r,o){if(e.required&&o)return void Gi('Missing required prop: "'+t+'"',r);if(null!=n||e.required){var i=e.type,s=!i||!0===i,a=[];if(i){Array.isArray(i)||(i=[i]);for(var u=0;u<i.length&&!s;u++){var l=re(n,i[u]);a.push(l.expectedType||""),s=l.valid}}if(!s)return void Gi('Invalid prop: type check failed for prop "'+t+'". Expected '+a.map(ki).join(", ")+", got "+c(n)+".",r);var p=e.validator;p&&(p(n)||Gi('Invalid prop: custom validator check failed for prop "'+t+'".',r))}}function re(e,t){var n,r=oe(t);if(ws.test(r)){var o=typeof e;n=o===r.toLowerCase(),n||"object"!==o||(n=e instanceof t)}else n="Object"===r?u(e):"Array"===r?Array.isArray(e):e instanceof t;return{valid:n,expectedType:r}}function oe(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function ie(e,t){if(!Array.isArray(t))return oe(t)===oe(e);for(var n=0,r=t.length;n<r;n++)if(oe(t[n])===oe(e))return!0;return!1}function se(e,t,n){if(t)for(var r=t;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{var s=!1===o[i].call(r,e,t,n);if(s)return}catch(e){ae(e,r,"errorCaptured hook")}}ae(e,t,n)}function ae(e,t,n){if(Ei.errorHandler)try{return Ei.errorHandler.call(null,e,t,n)}catch(e){ce(e,null,"config.errorHandler")}ce(e,t,n)}function ce(e,t,n){if(Gi("Error in "+n+': "'+e.toString()+'"',t),!ji&&!Bi||"undefined"==typeof console)throw e;console.error(e)}function ue(){ks=!1;var e=_s.slice(0);_s.length=0;for(var t=0;t<e.length;t++)e[t]()}function le(e){return e._withTask||(e._withTask=function(){xs=!0;var t=e.apply(null,arguments);return xs=!1,t})}function pe(e,t){var n;if(_s.push(function(){if(e)try{e.call(t)}catch(e){se(e,t,"nextTick")}else n&&n(t)}),ks||(ks=!0,xs?gs():ys()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}function fe(e){de(e,Ds),Ds.clear()}function de(e,t){var n,r,o=Array.isArray(e);if((o||a(e))&&!Object.isFrozen(e)){if(e.__ob__){var i=e.__ob__.dep.id;if(t.has(i))return;t.add(i)}if(o)for(n=e.length;n--;)de(e[n],t);else for(r=Object.keys(e),n=r.length;n--;)de(e[r[n]],t)}}function he(e){function t(){var e=arguments,n=t.fns;if(!Array.isArray(n))return n.apply(null,arguments);for(var r=n.slice(),o=0;o<r.length;o++)r[o].apply(null,e)}return t.fns=e,t}function ve(e,n,r,o,i){var s,a,c,u;for(s in e)a=e[s],c=n[s],u=Rs(s),t(a)?Gi('Invalid handler for event "'+u.name+'": got '+String(a),i):t(c)?(t(a.fns)&&(a=e[s]=he(a)),r(u.name,a,u.once,u.capture,u.passive,u.params)):a!==c&&(c.fns=a,e[s]=c);for(s in n)t(e[s])&&(u=Rs(s),o(u.name,n[s],u.capture))}function me(e,n,i){function s(){i.apply(this,arguments),v(a.fns,s)}e instanceof cs&&(e=e.data.hook||(e.data.hook={}));var a,c=e[n];t(c)?a=he([s]):r(c.fns)&&o(c.merged)?(a=c,a.fns.push(s)):a=he([c,s]),a.merged=!0,e[n]=a}function ye(e,n,o){var i=n.options.props;if(!t(i)){var s={},a=e.attrs,c=e.props;if(r(a)||r(c))for(var u in i){var l=Ci(u),p=u.toLowerCase();u!==p&&a&&m(a,p)&&Zi('Prop "'+p+'" is passed to component '+es(o||n)+', but the declared prop name is "'+u+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+u+'".'),ge(s,c,u,l,!0)||ge(s,a,u,l,!1)}return s}}function ge(e,t,n,o,i){if(r(t)){if(m(t,n))return e[n]=t[n],i||delete t[n],!0;if(m(t,o))return e[n]=t[o],i||delete t[o],!0}return!1}function be(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function we(e){return s(e)?[P(e)]:Array.isArray(e)?ke(e):void 0}function _e(e){return r(e)&&r(e.text)&&i(e.isComment)}function ke(e,n){var i,a,c,u,l=[];for(i=0;i<e.length;i++)a=e[i],t(a)||"boolean"==typeof a||(c=l.length-1,u=l[c],Array.isArray(a)?a.length>0&&(a=ke(a,(n||"")+"_"+i),_e(a[0])&&_e(u)&&(l[c]=P(u.text+a[0].text),a.shift()),l.push.apply(l,a)):s(a)?_e(u)?l[c]=P(u.text+a):""!==a&&l.push(P(a)):_e(a)&&_e(u)?l[c]=P(u.text+a.text):(o(e._isVList)&&r(a.tag)&&t(a.key)&&r(n)&&(a.key="__vlist"+n+"_"+i+"__"),l.push(a)));return l}function xe(e,t){return(e.__esModule||Yi&&"Module"===e[Symbol.toStringTag])&&(e=e.default),a(e)?t.extend(e):e}function Ce(e,t,n,r,o){var i=ls();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:r,tag:o},i}function Ae(e,n,i){if(o(e.error)&&r(e.errorComp))return e.errorComp;if(r(e.resolved))return e.resolved;if(o(e.loading)&&r(e.loadingComp))return e.loadingComp;if(!r(e.contexts)){var s=e.contexts=[i],c=!0,u=function(){for(var e=0,t=s.length;e<t;e++)s[e].$forceUpdate()},l=A(function(t){e.resolved=xe(t,n),c||u()}),p=A(function(t){Gi("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),r(e.errorComp)&&(e.error=!0,u())}),f=e(l,p);return a(f)&&("function"==typeof f.then?t(e.resolved)&&f.then(l,p):r(f.component)&&"function"==typeof f.component.then&&(f.component.then(l,p),r(f.error)&&(e.errorComp=xe(f.error,n)),r(f.loading)&&(e.loadingComp=xe(f.loading,n),0===f.delay?e.loading=!0:setTimeout(function(){t(e.resolved)&&t(e.error)&&(e.loading=!0,u())},f.delay||200)),r(f.timeout)&&setTimeout(function(){t(e.resolved)&&p("timeout ("+f.timeout+"ms)")},f.timeout))),c=!1,e.loading?e.loadingComp:e.resolved}e.contexts.push(i)}function $e(e){return e.isComment&&e.asyncFactory}function Se(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(r(n)&&(r(n.componentOptions)||$e(n)))return n}}function Oe(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Ne(e,t)}function Te(e,t,n){n?Is.$once(e,t):Is.$on(e,t)}function Ee(e,t){Is.$off(e,t)}function Ne(e,t,n){Is=e,ve(t,n||{},Te,Ee,e),Is=void 0}function Pe(e,t){var n={};if(!e)return n;for(var r=0,o=e.length;r<o;r++){var i=e[r],s=i.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,i.context!==t&&i.fnContext!==t||!s||null==s.slot)(n.default||(n.default=[])).push(i);else{var a=s.slot,c=n[a]||(n[a]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var u in n)n[u].every(je)&&delete n[u];return n}function je(e){return e.isComment&&!e.asyncFactory||" "===e.text}function Be(e,t){t=t||{};for(var n=0;n<e.length;n++)Array.isArray(e[n])?Be(e[n],t):t[e[n].key]=e[n].fn;return t}function Me(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function Le(e,t,n){e.$el=t,e.$options.render||(e.$options.render=ls,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?Gi("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):Gi("Failed to mount component: template or render function not defined.",e)),He(e,"beforeMount");var r;return r=Ei.performance&&Ss?function(){var t=e._name,r=e._uid,o="vue-perf-start:"+r,i="vue-perf-end:"+r;Ss(o);var s=e._render();Ss(i),Os("vue "+t+" render",o,i),Ss(o),e._update(s,n),Ss(i),Os("vue "+t+" patch",o,i)}:function(){e._update(e._render(),n)},new Gs(e,r,k,null,!0),n=!1,null==e.$vnode&&(e._isMounted=!0,He(e,"mounted")),e}function Ie(e,t,n,r,o){Hs=!0;var i=!!(o||e.$options._renderChildren||r.data.scopedSlots||e.$scopedSlots!==vi);if(e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r),e.$options._renderChildren=o,e.$attrs=r.data&&r.data.attrs||vi,e.$listeners=n||vi,t&&e.$options.props){hs.shouldConvert=!1;for(var s=e._props,a=e.$options._propKeys||[],c=0;c<a.length;c++){var u=a[c];s[u]=ee(u,e.$options.props,t,e)}hs.shouldConvert=!0,e.$options.propsData=t}if(n){var l=e.$options._parentListeners;e.$options._parentListeners=n,Ne(e,n,l)}i&&(e.$slots=Pe(o,r.context),e.$forceUpdate()),Hs=!1}function De(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Re(e,t){if(t){if(e._directInactive=!1,De(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Re(e.$children[n]);He(e,"activated")}}function Ue(e,t){if(!(t&&(e._directInactive=!0,De(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)Ue(e.$children[n]);He(e,"deactivated")}}function He(e,t){var n=e.$options[t];if(n)for(var r=0,o=n.length;r<o;r++)try{n[r].call(e)}catch(n){se(n,e,t+" hook")}e._hasHookEvent&&e.$emit("hook:"+t)}function Fe(){Ks=qs.length=zs.length=0,Vs={},Ws={},Xs=Js=!1}function qe(){Js=!0;var e,t;for(qs.sort(function(e,t){return e.id-t.id}),Ks=0;Ks<qs.length;Ks++)if(e=qs[Ks],t=e.id,Vs[t]=null,e.run(),null!=Vs[t]&&(Ws[t]=(Ws[t]||0)+1,Ws[t]>Fs)){Gi("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=zs.slice(),r=qs.slice();Fe(),We(n),ze(r),Ki&&Ei.devtools&&Ki.emit("flush")}function ze(e){for(var t=e.length;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&He(r,"updated")}}function Ve(e){e._inactive=!1,zs.push(e)}function We(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Re(e[t],!0)}function Xe(e){var t=e.id;if(null==Vs[t]){if(Vs[t]=!0,Js){for(var n=qs.length-1;n>Ks&&qs[n].id>e.id;)n--;qs.splice(n+1,0,e)}else qs.push(e);Xs||(Xs=!0,pe(qe))}}function Je(e,t,n){Zs.get=function(){return this[t][n]},Zs.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Zs)}function Ke(e){e._watchers=[];var t=e.$options;t.props&&Ye(e,t.props),t.methods&&nt(e,t.methods),t.data?Ge(e):I(e._data={},!0),t.computed&&Qe(e,t.computed),t.watch&&t.watch!==qi&&rt(e,t.watch)}function Ye(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[],i=!e.$parent;hs.shouldConvert=i;for(var s in t)!function(i){o.push(i);var s=ee(i,t,n,e),a=Ci(i);(gi(a)||Ei.isReservedAttr(a))&&Gi('"'+a+'" is a reserved attribute and cannot be used as component prop.',e),D(r,i,s,function(){e.$parent&&!Hs&&Gi("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+i+'"',e)}),i in e||Je(e,"_props",i)}(s);hs.shouldConvert=!0}function Ge(e){var t=e.$options.data;t=e._data="function"==typeof t?Ze(t,e):t||{},u(t)||(t={},Gi("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,i=n.length;i--;){var s=n[i];o&&m(o,s)&&Gi('Method "'+s+'" has already been defined as a data property.',e),r&&m(r,s)?Gi('The data property "'+s+'" is already declared as a prop. Use prop default value instead.',e):$(s)||Je(e,"_data",s)}I(t,!0)}function Ze(e,t){try{return e.call(t,t)}catch(e){return se(e,t,"data()"),{}}}function Qe(e,t){var n=e._computedWatchers=Object.create(null),r=Ji();for(var o in t){var i=t[o],s="function"==typeof i?i:i.get;null==s&&Gi('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new Gs(e,s||k,k,Qs)),o in e?o in e.$data?Gi('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props&&Gi('The computed property "'+o+'" is already defined as a prop.',e):et(e,o,i)}}function et(e,t,n){var r=!Ji();"function"==typeof n?(Zs.get=r?tt(t):n,Zs.set=k):(Zs.get=n.get?r&&!1!==n.cache?tt(t):n.get:k,Zs.set=n.set?n.set:k),Zs.set===k&&(Zs.set=function(){Gi('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Zs)}function tt(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ss.target&&t.depend(),t.value}}function nt(e,t){var n=e.$options.props;for(var r in t)null==t[r]&&Gi('Method "'+r+'" has an undefined value in the component definition. Did you reference the function correctly?',e),n&&m(n,r)&&Gi('Method "'+r+'" has already been defined as a prop.',e),r in e&&$(r)&&Gi('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]=null==t[r]?k:g(t[r],e)}function rt(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)ot(e,n,r[o]);else ot(e,n,r)}}function ot(e,t,n,r){return u(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function it(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}function st(e){var t=at(e.$options.inject,e);t&&(hs.shouldConvert=!1,Object.keys(t).forEach(function(n){D(e,n,t[n],function(){Gi('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)})}),hs.shouldConvert=!0)}function at(e,t){if(e){for(var n=Object.create(null),r=Yi?Reflect.ownKeys(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}):Object.keys(e),o=0;o<r.length;o++){for(var i=r[o],s=e[i].from,a=t;a;){if(a._provided&&s in a._provided){n[i]=a._provided[s];break}a=a.$parent}if(!a)if("default"in e[i]){var c=e[i].default;n[i]="function"==typeof c?c.call(t):c}else Gi('Injection "'+i+'" not found',t)}return n}}function ct(e,t){var n,o,i,s,c;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),o=0,i=e.length;o<i;o++)n[o]=t(e[o],o);else if("number"==typeof e)for(n=new Array(e),o=0;o<e;o++)n[o]=t(o+1,o);else if(a(e))for(s=Object.keys(e),n=new Array(s.length),o=0,i=s.length;o<i;o++)c=s[o],n[o]=t(e[c],c,o);return r(n)&&(n._isVList=!0),n}function ut(e,t,n,r){var o,i=this.$scopedSlots[e];if(i)n=n||{},r&&(a(r)||Gi("slot v-bind without argument expects an Object",this),n=w(w({},r),n)),o=i(n)||t;else{var s=this.$slots[e];s&&(s._rendered&&Gi('Duplicate presence of slot "'+e+'" found in the same render tree - this will likely cause render errors.',this),s._rendered=!0),o=s||t}var c=n&&n.slot;return c?this.$createElement("template",{slot:c},o):o}function lt(e){return Q(this.$options,"filters",e,!0)||$i}function pt(e,t,n,r){var o=Ei.keyCodes[t]||n;return o?Array.isArray(o)?-1===o.indexOf(e):o!==e:r?Ci(r)!==t:void 0}function ft(e,t,n,r,o){if(n)if(a(n)){Array.isArray(n)&&(n=_(n));var i;for(var s in n)!function(s){if("class"===s||"style"===s||gi(s))i=e;else{var a=e.attrs&&e.attrs.type;i=r||Ei.mustUseProp(t,a,s)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}if(!(s in i)&&(i[s]=n[s],o)){(e.on||(e.on={}))["update:"+s]=function(e){n[s]=e}}}(s)}else Gi("v-bind without argument expects an Object or Array value",this);return e}function dt(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t?Array.isArray(r)?B(r):j(r):(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),vt(r,"__static__"+e,!1),r)}function ht(e,t,n){return vt(e,"__once__"+t+(n?"_"+n:""),!0),e}function vt(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&mt(e[r],t+"_"+r,n);else mt(e,t,n)}function mt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function yt(e,t){if(t)if(u(t)){var n=e.on=e.on?w({},e.on):{};for(var r in t){var o=n[r],i=t[r];n[r]=o?[].concat(o,i):i}}else Gi("v-on without argument expects an Object value",this);return e}function gt(e){e._o=ht,e._n=d,e._s=f,e._l=ct,e._t=ut,e._q=x,e._i=C,e._m=dt,e._f=lt,e._k=pt,e._b=ft,e._v=P,e._e=ls,e._u=Be,e._g=yt}function bt(e,t,n,r,i){var s=i.options;this.data=e,this.props=t,this.children=n,this.parent=r,this.listeners=e.on||vi,this.injections=at(s.inject,r),this.slots=function(){return Pe(n,r)};var a=Object.create(r),c=o(s._compiled),u=!c;c&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=e.scopedSlots||vi),s._scopeId?this._c=function(e,t,n,o){var i=St(a,e,t,n,o,u);return i&&(i.fnScopeId=s._scopeId,i.fnContext=r),i}:this._c=function(e,t,n,r){return St(a,e,t,n,r,u)}}function wt(e,t,n,o,i){var s=e.options,a={},c=s.props;if(r(c))for(var u in c)a[u]=ee(u,c,t||vi);else r(n.attrs)&&_t(a,n.attrs),r(n.props)&&_t(a,n.props);var l=new bt(n,a,i,o,e),p=s.render.call(null,l._c,l);return p instanceof cs&&(p.fnContext=o,p.fnOptions=s,n.slot&&((p.data||(p.data={})).slot=n.slot)),p}function _t(e,t){for(var n in t)e[_i(n)]=t[n]}function kt(e,n,i,s,c){if(!t(e)){var u=i.$options._base;if(a(e)&&(e=u.extend(e)),"function"!=typeof e)return void Gi("Invalid Component definition: "+String(e),i);var l;if(t(e.cid)&&(l=e,void 0===(e=Ae(l,u,i))))return Ce(l,n,i,s,c);n=n||{},Pt(e),r(n.model)&&$t(e.options,n);var p=ye(n,e,c);if(o(e.options.functional))return wt(e,p,n,i,s);var f=n.on;if(n.on=n.nativeOn,o(e.options.abstract)){var d=n.slot;n={},d&&(n.slot=d)}Ct(n);var h=e.options.name||c;return new cs("vue-component-"+e.cid+(h?"-"+h:""),n,void 0,void 0,void 0,i,{Ctor:e,propsData:p,listeners:f,tag:c,children:s},l)}}function xt(e,t,n,o){var i={_isComponent:!0,parent:t,_parentVnode:e,_parentElm:n||null,_refElm:o||null},s=e.data.inlineTemplate;return r(s)&&(i.render=s.render,i.staticRenderFns=s.staticRenderFns),new e.componentOptions.Ctor(i)}function Ct(e){e.hook||(e.hook={});for(var t=0;t<ta.length;t++){var n=ta[t],r=e.hook[n],o=ea[n];e.hook[n]=r?At(o,r):o}}function At(e,t){return function(n,r,o,i){e(n,r,o,i),t(n,r,o,i)}}function $t(e,t){var n=e.model&&e.model.prop||"value",o=e.model&&e.model.event||"input";(t.props||(t.props={}))[n]=t.model.value;var i=t.on||(t.on={});r(i[o])?i[o]=[t.model.callback].concat(i[o]):i[o]=t.model.callback}function St(e,t,n,r,i,a){return(Array.isArray(n)||s(n))&&(i=r,r=n,n=void 0),o(a)&&(i=ra),Ot(e,t,n,r,i)}function Ot(e,t,n,o,i){if(r(n)&&r(n.__ob__))return Gi("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),ls();if(r(n)&&r(n.is)&&(t=n.is),!t)return ls();r(n)&&r(n.key)&&!s(n.key)&&Gi("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(o)&&"function"==typeof o[0]&&(n=n||{},n.scopedSlots={default:o[0]},o.length=0),i===ra?o=we(o):i===na&&(o=be(o));var a,c;if("string"==typeof t){var u;c=e.$vnode&&e.$vnode.ns||Ei.getTagNamespace(t),a=Ei.isReservedTag(t)?new cs(Ei.parsePlatformTagName(t),n,o,void 0,void 0,e):r(u=Q(e.$options,"components",t))?kt(u,n,e,o,t):new cs(t,n,o,void 0,void 0,e)}else a=kt(t,n,e,o);return r(a)?(c&&Tt(a,c),a):ls()}function Tt(e,n,i){if(e.ns=n,"foreignObject"===e.tag&&(n=void 0,i=!0),r(e.children))for(var s=0,a=e.children.length;s<a;s++){var c=e.children[s];r(c.tag)&&(t(c.ns)||o(i))&&Tt(c,n,i)}}function Et(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,r=n&&n.context;e.$slots=Pe(t._renderChildren,r),e.$scopedSlots=vi,e._c=function(t,n,r,o){return St(e,t,n,r,o,!1)},e.$createElement=function(t,n,r,o){return St(e,t,n,r,o,!0)};var o=n&&n.data;D(e,"$attrs",o&&o.attrs||vi,function(){!Hs&&Gi("$attrs is readonly.",e)},!0),D(e,"$listeners",t._parentListeners||vi,function(){!Hs&&Gi("$listeners is readonly.",e)},!0)}function Nt(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r,n._parentElm=t._parentElm,n._refElm=t._refElm;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function Pt(e){var t=e.options;if(e.super){var n=Pt(e.super);if(n!==e.superOptions){e.superOptions=n;var r=jt(e);r&&w(e.extendOptions,r),t=e.options=Z(n,e.extendOptions),t.name&&(t.components[t.name]=e)}}return t}function jt(e){var t,n=e.options,r=e.extendOptions,o=e.sealedOptions;for(var i in n)n[i]!==o[i]&&(t||(t={}),t[i]=Bt(n[i],r[i],o[i]));return t}function Bt(e,t,n){if(Array.isArray(e)){var r=[];n=Array.isArray(n)?n:[n],t=Array.isArray(t)?t:[t];for(var o=0;o<e.length;o++)(t.indexOf(e[o])>=0||n.indexOf(e[o])<0)&&r.push(e[o]);return r}return e}function Mt(e){this instanceof Mt||Gi("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function Lt(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=b(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}function It(e){e.mixin=function(e){return this.options=Z(this.options,e),this}}function Dt(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var i=e.name||n.options.name;i&&X(i);var s=function(e){this._init(e)};return s.prototype=Object.create(n.prototype),s.prototype.constructor=s,s.cid=t++,s.options=Z(n.options,e),s.super=n,s.options.props&&Rt(s),s.options.computed&&Ut(s),s.extend=n.extend,s.mixin=n.mixin,s.use=n.use,Oi.forEach(function(e){s[e]=n[e]}),i&&(s.options.components[i]=s),s.superOptions=n.options,s.extendOptions=e,s.sealedOptions=w({},s.options),o[r]=s,s}}function Rt(e){var t=e.options.props;for(var n in t)Je(e.prototype,"_props",n)}function Ut(e){var t=e.options.computed;for(var n in t)et(e.prototype,n,t[n])}function Ht(e){Oi.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&X(e),"component"===t&&u(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}function Ft(e){return e&&(e.Ctor.options.name||e.tag)}function qt(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!l(e)&&e.test(t)}function zt(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var i in n){var s=n[i];if(s){var a=Ft(s.componentOptions);a&&!t(a)&&Vt(n,i,r,o)}}}function Vt(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,v(n,t)}function Wt(e){for(var t=e.data,n=e,o=e;r(o.componentInstance);)(o=o.componentInstance._vnode)&&o.data&&(t=Xt(o.data,t));for(;r(n=n.parent);)n&&n.data&&(t=Xt(t,n.data));return Jt(t.staticClass,t.class)}function Xt(e,t){return{staticClass:Kt(e.staticClass,t.staticClass),class:r(e.class)?[e.class,t.class]:t.class}}function Jt(e,t){return r(e)||r(t)?Kt(e,Yt(t)):""}function Kt(e,t){return e?t?e+" "+t:e:t||""}function Yt(e){return Array.isArray(e)?Gt(e):a(e)?Zt(e):"string"==typeof e?e:""}function Gt(e){for(var t,n="",o=0,i=e.length;o<i;o++)r(t=Yt(e[o]))&&""!==t&&(n&&(n+=" "),n+=t);return n}function Zt(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}function Qt(e){return Oa(e)?"svg":"math"===e?"math":void 0}function en(e){if(!ji)return!0;if(Ea(e))return!1;if(e=e.toLowerCase(),null!=Na[e])return Na[e];var t=document.createElement(e);return e.indexOf("-")>-1?Na[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Na[e]=/HTMLUnknownElement/.test(t.toString())}function tn(e){if("string"==typeof e){var t=document.querySelector(e);return t||(Gi("Cannot find element: "+e),document.createElement("div"))}return e}function nn(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)}function rn(e,t){return document.createElementNS($a[e],t)}function on(e){return document.createTextNode(e)}function sn(e){return document.createComment(e)}function an(e,t,n){e.insertBefore(t,n)}function cn(e,t){e.removeChild(t)}function un(e,t){e.appendChild(t)}function ln(e){return e.parentNode}function pn(e){return e.nextSibling}function fn(e){return e.tagName}function dn(e,t){e.textContent=t}function hn(e,t,n){e.setAttribute(t,n)}function vn(e,t){var n=e.data.ref;if(n){var r=e.context,o=e.componentInstance||e.elm,i=r.$refs;t?Array.isArray(i[n])?v(i[n],o):i[n]===o&&(i[n]=void 0):e.data.refInFor?Array.isArray(i[n])?i[n].indexOf(o)<0&&i[n].push(o):i[n]=[o]:i[n]=o}}function mn(e,n){return e.key===n.key&&(e.tag===n.tag&&e.isComment===n.isComment&&r(e.data)===r(n.data)&&yn(e,n)||o(e.isAsyncPlaceholder)&&e.asyncFactory===n.asyncFactory&&t(n.asyncFactory.error))}function yn(e,t){if("input"!==e.tag)return!0;var n,o=r(n=e.data)&&r(n=n.attrs)&&n.type,i=r(n=t.data)&&r(n=n.attrs)&&n.type;return o===i||Pa(o)&&Pa(i)}function gn(e,t,n){var o,i,s={};for(o=t;o<=n;++o)i=e[o].key,r(i)&&(s[i]=o);return s}function bn(e,t){(e.data.directives||t.data.directives)&&wn(e,t)}function wn(e,t){var n,r,o,i=e===Ma,s=t===Ma,a=_n(e.data.directives,e.context),c=_n(t.data.directives,t.context),u=[],l=[];for(n in c)r=a[n],o=c[n],r?(o.oldValue=r.value,xn(o,"update",t,e),o.def&&o.def.componentUpdated&&l.push(o)):(xn(o,"bind",t,e),o.def&&o.def.inserted&&u.push(o));if(u.length){var p=function(){for(var n=0;n<u.length;n++)xn(u[n],"inserted",t,e)};i?me(t,"insert",p):p()}if(l.length&&me(t,"postpatch",function(){
for(var n=0;n<l.length;n++)xn(l[n],"componentUpdated",t,e)}),!i)for(n in a)c[n]||xn(a[n],"unbind",e,e,s)}function _n(e,t){var n=Object.create(null);if(!e)return n;var r,o;for(r=0;r<e.length;r++)o=e[r],o.modifiers||(o.modifiers=Da),n[kn(o)]=o,o.def=Q(t.$options,"directives",o.name,!0);return n}function kn(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function xn(e,t,n,r,o){var i=e.def&&e.def[t];if(i)try{i(n.elm,e,n,r,o)}catch(r){se(r,n.context,"directive "+e.name+" "+t+" hook")}}function Cn(e,n){var o=n.componentOptions;if(!(r(o)&&!1===o.Ctor.options.inheritAttrs||t(e.data.attrs)&&t(n.data.attrs))){var i,s,a=n.elm,c=e.data.attrs||{},u=n.data.attrs||{};r(u.__ob__)&&(u=n.data.attrs=w({},u));for(i in u)s=u[i],c[i]!==s&&An(a,i,s);(Ii||Ri)&&u.value!==c.value&&An(a,"value",u.value);for(i in c)t(u[i])&&(xa(i)?a.removeAttributeNS(ka,Ca(i)):wa(i)||a.removeAttribute(i))}}function An(e,t,n){if(_a(t))Aa(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n));else if(wa(t))e.setAttribute(t,Aa(n)||"false"===n?"false":"true");else if(xa(t))Aa(n)?e.removeAttributeNS(ka,Ca(t)):e.setAttributeNS(ka,t,n);else if(Aa(n))e.removeAttribute(t);else{if(Ii&&!Di&&"TEXTAREA"===e.tagName&&"placeholder"===t&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}function $n(e,n){var o=n.elm,i=n.data,s=e.data;if(!(t(i.staticClass)&&t(i.class)&&(t(s)||t(s.staticClass)&&t(s.class)))){var a=Wt(n),c=o._transitionClasses;r(c)&&(a=Kt(a,Yt(c))),a!==o._prevClass&&(o.setAttribute("class",a),o._prevClass=a)}}function Sn(e){function t(){(s||(s=[])).push(e.slice(h,o).trim()),h=o+1}var n,r,o,i,s,a=!1,c=!1,u=!1,l=!1,p=0,f=0,d=0,h=0;for(o=0;o<e.length;o++)if(r=n,n=e.charCodeAt(o),a)39===n&&92!==r&&(a=!1);else if(c)34===n&&92!==r&&(c=!1);else if(u)96===n&&92!==r&&(u=!1);else if(l)47===n&&92!==r&&(l=!1);else if(124!==n||124===e.charCodeAt(o+1)||124===e.charCodeAt(o-1)||p||f||d){switch(n){case 34:c=!0;break;case 39:a=!0;break;case 96:u=!0;break;case 40:d++;break;case 41:d--;break;case 91:f++;break;case 93:f--;break;case 123:p++;break;case 125:p--}if(47===n){for(var v=o-1,m=void 0;v>=0&&" "===(m=e.charAt(v));v--);m&&Fa.test(m)||(l=!0)}}else void 0===i?(h=o+1,i=e.slice(0,o).trim()):t();if(void 0===i?i=e.slice(0,o).trim():0!==h&&t(),s)for(o=0;o<s.length;o++)i=On(i,s[o]);return i}function On(e,t){var n=t.indexOf("(");return n<0?'_f("'+t+'")('+e+")":'_f("'+t.slice(0,n)+'")('+e+","+t.slice(n+1)}function Tn(e){console.error("[Vue compiler]: "+e)}function En(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function Nn(e,t,n){(e.props||(e.props=[])).push({name:t,value:n}),e.plain=!1}function Pn(e,t,n){(e.attrs||(e.attrs=[])).push({name:t,value:n}),e.plain=!1}function jn(e,t,n){e.attrsMap[t]=n,e.attrsList.push({name:t,value:n})}function Bn(e,t,n,r,o,i){(e.directives||(e.directives=[])).push({name:t,rawName:n,value:r,arg:o,modifiers:i}),e.plain=!1}function Mn(e,t,n,r,o,i){r=r||vi,i&&r.prevent&&r.passive&&i("passive and prevent can't be used together. Passive handler can't prevent default event."),r.capture&&(delete r.capture,t="!"+t),r.once&&(delete r.once,t="~"+t),r.passive&&(delete r.passive,t="&"+t),"click"===t&&(r.right?(t="contextmenu",delete r.right):r.middle&&(t="mouseup"));var s;r.native?(delete r.native,s=e.nativeEvents||(e.nativeEvents={})):s=e.events||(e.events={});var a={value:n};r!==vi&&(a.modifiers=r);var c=s[t];Array.isArray(c)?o?c.unshift(a):c.push(a):s[t]=c?o?[a,c]:[c,a]:a,e.plain=!1}function Ln(e,t,n){var r=In(e,":"+t)||In(e,"v-bind:"+t);if(null!=r)return Sn(r);if(!1!==n){var o=In(e,t);if(null!=o)return JSON.stringify(o)}}function In(e,t,n){var r;if(null!=(r=e.attrsMap[t]))for(var o=e.attrsList,i=0,s=o.length;i<s;i++)if(o[i].name===t){o.splice(i,1);break}return n&&delete e.attrsMap[t],r}function Dn(e,t,n){var r=n||{},o=r.number,i=r.trim,s="$$v";i&&(s="(typeof $$v === 'string'? $$v.trim(): $$v)"),o&&(s="_n("+s+")");var a=Rn(t,s);e.model={value:"("+t+")",expression:'"'+t+'"',callback:"function ($$v) {"+a+"}"}}function Rn(e,t){var n=Un(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function Un(e){if(ca=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<ca-1)return pa=e.lastIndexOf("."),pa>-1?{exp:e.slice(0,pa),key:'"'+e.slice(pa+1)+'"'}:{exp:e,key:null};for(ua=e,pa=fa=da=0;!Fn();)la=Hn(),qn(la)?Vn(la):91===la&&zn(la);return{exp:e.slice(0,fa),key:e.slice(fa+1,da)}}function Hn(){return ua.charCodeAt(++pa)}function Fn(){return pa>=ca}function qn(e){return 34===e||39===e}function zn(e){var t=1;for(fa=pa;!Fn();)if(e=Hn(),qn(e))Vn(e);else if(91===e&&t++,93===e&&t--,0===t){da=pa;break}}function Vn(e){for(var t=e;!Fn()&&(e=Hn())!==t;);}function Wn(e,t,n){ha=n;var r=t.value,o=t.modifiers,i=e.tag,s=e.attrsMap.type;if("input"===i&&"file"===s&&ha("<"+e.tag+' v-model="'+r+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.'),e.component)return Dn(e,r,o),!1;if("select"===i)Kn(e,r,o);else if("input"===i&&"checkbox"===s)Xn(e,r,o);else if("input"===i&&"radio"===s)Jn(e,r,o);else if("input"===i||"textarea"===i)Yn(e,r,o);else{if(!Ei.isReservedTag(i))return Dn(e,r,o),!1;ha("<"+e.tag+' v-model="'+r+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.")}return!0}function Xn(e,t,n){var r=n&&n.number,o=Ln(e,"value")||"null",i=Ln(e,"true-value")||"true",s=Ln(e,"false-value")||"false";Nn(e,"checked","Array.isArray("+t+")?_i("+t+","+o+")>-1"+("true"===i?":("+t+")":":_q("+t+","+i+")")),Mn(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+i+"):("+s+");if(Array.isArray($$a)){var $$v="+(r?"_n("+o+")":o)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+t+"=$$a.concat([$$v]))}else{$$i>-1&&("+t+"=$$a.slice(0,$$i).concat($$a.slice($$i+1)))}}else{"+Rn(t,"$$c")+"}",null,!0)}function Jn(e,t,n){var r=n&&n.number,o=Ln(e,"value")||"null";o=r?"_n("+o+")":o,Nn(e,"checked","_q("+t+","+o+")"),Mn(e,"change",Rn(t,o),null,!0)}function Kn(e,t,n){var r=n&&n.number,o='Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(r?"_n(val)":"val")+"})",i="var $$selectedVal = "+o+";";i=i+" "+Rn(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Mn(e,"change",i,null,!0)}function Yn(e,t,n){var r=e.attrsMap.type,o=e.attrsMap["v-bind:value"]||e.attrsMap[":value"];if(o){var i=e.attrsMap["v-bind:value"]?"v-bind:value":":value";ha(i+'="'+o+'" conflicts with v-model on the same element because the latter already expands to a value binding internally')}var s=n||{},a=s.lazy,c=s.number,u=s.trim,l=!a&&"range"!==r,p=a?"change":"range"===r?qa:"input",f="$event.target.value";u&&(f="$event.target.value.trim()"),c&&(f="_n("+f+")");var d=Rn(t,f);l&&(d="if($event.target.composing)return;"+d),Nn(e,"value","("+t+")"),Mn(e,p,d,null,!0),(u||c)&&Mn(e,"blur","$forceUpdate()")}function Gn(e){if(r(e[qa])){var t=Ii?"change":"input";e[t]=[].concat(e[qa],e[t]||[]),delete e[qa]}r(e[za])&&(e.change=[].concat(e[za],e.change||[]),delete e[za])}function Zn(e,t,n){var r=va;return function o(){null!==e.apply(null,arguments)&&er(t,o,n,r)}}function Qn(e,t,n,r,o){t=le(t),n&&(t=Zn(t,e,r)),va.addEventListener(e,t,zi?{capture:r,passive:o}:r)}function er(e,t,n,r){(r||va).removeEventListener(e,t._withTask||t,n)}function tr(e,n){if(!t(e.data.on)||!t(n.data.on)){var r=n.data.on||{},o=e.data.on||{};va=n.elm,Gn(r),ve(r,o,Qn,er,n.context),va=void 0}}function nr(e,n){if(!t(e.data.domProps)||!t(n.data.domProps)){var o,i,s=n.elm,a=e.data.domProps||{},c=n.data.domProps||{};r(c.__ob__)&&(c=n.data.domProps=w({},c));for(o in a)t(c[o])&&(s[o]="");for(o in c){if(i=c[o],"textContent"===o||"innerHTML"===o){if(n.children&&(n.children.length=0),i===a[o])continue;1===s.childNodes.length&&s.removeChild(s.childNodes[0])}if("value"===o){s._value=i;var u=t(i)?"":String(i);rr(s,u)&&(s.value=u)}else s[o]=i}}}function rr(e,t){return!e.composing&&("OPTION"===e.tagName||or(e,t)||ir(e,t))}function or(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}function ir(e,t){var n=e.value,o=e._vModifiers;if(r(o)){if(o.lazy)return!1;if(o.number)return d(n)!==d(t);if(o.trim)return n.trim()!==t.trim()}return n!==t}function sr(e){var t=ar(e.style);return e.staticStyle?w(e.staticStyle,t):t}function ar(e){return Array.isArray(e)?_(e):"string"==typeof e?Xa(e):e}function cr(e,t){var n,r={};if(t)for(var o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=sr(o.data))&&w(r,n);(n=sr(e.data))&&w(r,n);for(var i=e;i=i.parent;)i.data&&(n=sr(i.data))&&w(r,n);return r}function ur(e,n){var o=n.data,i=e.data;if(!(t(o.staticStyle)&&t(o.style)&&t(i.staticStyle)&&t(i.style))){var s,a,c=n.elm,u=i.staticStyle,l=i.normalizedStyle||i.style||{},p=u||l,f=ar(n.data.style)||{};n.data.normalizedStyle=r(f.__ob__)?w({},f):f;var d=cr(n,!0);for(a in p)t(d[a])&&Ya(c,a,"");for(a in d)(s=d[a])!==p[a]&&Ya(c,a,null==s?"":s)}}function lr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function pr(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(/\s+/).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");n=n.trim(),n?e.setAttribute("class",n):e.removeAttribute("class")}}function fr(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&w(t,ec(e.name||"v")),w(t,e),t}return"string"==typeof e?ec(e):void 0}}function dr(e){cc(function(){cc(e)})}function hr(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),lr(e,t))}function vr(e,t){e._transitionClasses&&v(e._transitionClasses,t),pr(e,t)}function mr(e,t,n){var r=yr(e,t),o=r.type,i=r.timeout,s=r.propCount;if(!o)return n();var a=o===nc?ic:ac,c=0,u=function(){e.removeEventListener(a,l),n()},l=function(t){t.target===e&&++c>=s&&u()};setTimeout(function(){c<s&&u()},i+1),e.addEventListener(a,l)}function yr(e,t){var n,r=window.getComputedStyle(e),o=r[oc+"Delay"].split(", "),i=r[oc+"Duration"].split(", "),s=gr(o,i),a=r[sc+"Delay"].split(", "),c=r[sc+"Duration"].split(", "),u=gr(a,c),l=0,p=0;return t===nc?s>0&&(n=nc,l=s,p=i.length):t===rc?u>0&&(n=rc,l=u,p=c.length):(l=Math.max(s,u),n=l>0?s>u?nc:rc:null,p=n?n===nc?i.length:c.length:0),{type:n,timeout:l,propCount:p,hasTransform:n===nc&&uc.test(r[oc+"Property"])}}function gr(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return br(t)+br(e[n])}))}function br(e){return 1e3*Number(e.slice(0,-1))}function wr(e,n){var o=e.elm;r(o._leaveCb)&&(o._leaveCb.cancelled=!0,o._leaveCb());var i=fr(e.data.transition);if(!t(i)&&!r(o._enterCb)&&1===o.nodeType){for(var s=i.css,c=i.type,u=i.enterClass,l=i.enterToClass,p=i.enterActiveClass,f=i.appearClass,h=i.appearToClass,v=i.appearActiveClass,m=i.beforeEnter,y=i.enter,g=i.afterEnter,b=i.enterCancelled,w=i.beforeAppear,_=i.appear,k=i.afterAppear,x=i.appearCancelled,C=i.duration,$=Us,S=Us.$vnode;S&&S.parent;)S=S.parent,$=S.context;var O=!$._isMounted||!e.isRootInsert;if(!O||_||""===_){var T=O&&f?f:u,E=O&&v?v:p,N=O&&h?h:l,P=O?w||m:m,j=O&&"function"==typeof _?_:y,B=O?k||g:g,M=O?x||b:b,L=d(a(C)?C.enter:C);null!=L&&kr(L,"enter",e);var I=!1!==s&&!Di,D=Cr(j),R=o._enterCb=A(function(){I&&(vr(o,N),vr(o,E)),R.cancelled?(I&&vr(o,T),M&&M(o)):B&&B(o),o._enterCb=null});e.data.show||me(e,"insert",function(){var t=o.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),j&&j(o,R)}),P&&P(o),I&&(hr(o,T),hr(o,E),dr(function(){hr(o,N),vr(o,T),R.cancelled||D||(xr(L)?setTimeout(R,L):mr(o,c,R))})),e.data.show&&(n&&n(),j&&j(o,R)),I||D||R()}}}function _r(e,n){function o(){x.cancelled||(e.data.show||((i.parentNode._pending||(i.parentNode._pending={}))[e.key]=e),h&&h(i),w&&(hr(i,l),hr(i,f),dr(function(){hr(i,p),vr(i,l),x.cancelled||_||(xr(k)?setTimeout(x,k):mr(i,u,x))})),v&&v(i,x),w||_||x())}var i=e.elm;r(i._enterCb)&&(i._enterCb.cancelled=!0,i._enterCb());var s=fr(e.data.transition);if(t(s)||1!==i.nodeType)return n();if(!r(i._leaveCb)){var c=s.css,u=s.type,l=s.leaveClass,p=s.leaveToClass,f=s.leaveActiveClass,h=s.beforeLeave,v=s.leave,m=s.afterLeave,y=s.leaveCancelled,g=s.delayLeave,b=s.duration,w=!1!==c&&!Di,_=Cr(v),k=d(a(b)?b.leave:b);r(k)&&kr(k,"leave",e);var x=i._leaveCb=A(function(){i.parentNode&&i.parentNode._pending&&(i.parentNode._pending[e.key]=null),w&&(vr(i,p),vr(i,f)),x.cancelled?(w&&vr(i,l),y&&y(i)):(n(),m&&m(i)),i._leaveCb=null});g?g(o):o()}}function kr(e,t,n){"number"!=typeof e?Gi("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&Gi("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function xr(e){return"number"==typeof e&&!isNaN(e)}function Cr(e){if(t(e))return!1;var n=e.fns;return r(n)?Cr(Array.isArray(n)?n[0]:n):(e._length||e.length)>1}function Ar(e,t){!0!==t.data.show&&wr(t)}function $r(e,t,n){Sr(e,t,n),(Ii||Ri)&&setTimeout(function(){Sr(e,t,n)},0)}function Sr(e,t,n){var r=t.value,o=e.multiple;if(o&&!Array.isArray(r))return void Gi('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n);for(var i,s,a=0,c=e.options.length;a<c;a++)if(s=e.options[a],o)i=C(r,Tr(s))>-1,s.selected!==i&&(s.selected=i);else if(x(Tr(s),r))return void(e.selectedIndex!==a&&(e.selectedIndex=a));o||(e.selectedIndex=-1)}function Or(e,t){return t.every(function(t){return!x(t,e)})}function Tr(e){return"_value"in e?e._value:e.value}function Er(e){e.target.composing=!0}function Nr(e){e.target.composing&&(e.target.composing=!1,Pr(e.target,"input"))}function Pr(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function jr(e){return!e.componentInstance||e.data&&e.data.transition?e:jr(e.componentInstance._vnode)}function Br(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Br(Se(t.children)):e}function Mr(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var i in o)t[_i(i)]=o[i];return t}function Lr(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}function Ir(e){for(;e=e.parent;)if(e.data.transition)return!0}function Dr(e,t){return t.key===e.key&&t.tag===e.tag}function Rr(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Ur(e){e.data.newPos=e.elm.getBoundingClientRect()}function Hr(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}function Fr(e,t){var n=t?Ac(t):xc;if(n.test(e)){for(var r,o,i,s=[],a=[],c=n.lastIndex=0;r=n.exec(e);){o=r.index,o>c&&(a.push(i=e.slice(c,o)),s.push(JSON.stringify(i)));var u=Sn(r[1].trim());s.push("_s("+u+")"),a.push({"@binding":u}),c=o+r[0].length}return c<e.length&&(a.push(i=e.slice(c)),s.push(JSON.stringify(i))),{expression:s.join("+"),tokens:a}}}function qr(e,t){var n=t.warn||Tn,r=In(e,"class");if(r){Fr(r,t.delimiters)&&n('class="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.')}r&&(e.staticClass=JSON.stringify(r));var o=Ln(e,"class",!1);o&&(e.classBinding=o)}function zr(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}function Vr(e,t){var n=t.warn||Tn,r=In(e,"style");if(r){Fr(r,t.delimiters)&&n('style="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.'),e.staticStyle=JSON.stringify(Xa(r))}var o=Ln(e,"style",!1);o&&(e.styleBinding=o)}function Wr(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}function Xr(e,t){var n=t?ru:nu;return e.replace(n,function(e){return tu[e]})}function Jr(e,t){function n(t){l+=t,e=e.substring(t)}function r(e,n,r){var o,a;if(null==n&&(n=l),null==r&&(r=l),e&&(a=e.toLowerCase()),e)for(o=s.length-1;o>=0&&s[o].lowerCasedTag!==a;o--);else o=0;if(o>=0){for(var c=s.length-1;c>=o;c--)(c>o||!e)&&t.warn&&t.warn("tag <"+s[c].tag+"> has no matching end tag."),t.end&&t.end(s[c].tag,n,r);s.length=o,i=o&&s[o-1].tag}else"br"===a?t.start&&t.start(e,[],!0,n,r):"p"===a&&(t.start&&t.start(e,[],!1,n,r),t.end&&t.end(e,n,r))}for(var o,i,s=[],a=t.expectHTML,c=t.isUnaryTag||Ai,u=t.canBeLeftOpenTag||Ai,l=0;e;){if(o=e,i&&Qc(i)){var p=0,f=i.toLowerCase(),d=eu[f]||(eu[f]=new RegExp("([\\s\\S]*?)(</"+f+"[^>]*>)","i")),h=e.replace(d,function(e,n,r){return p=r.length,Qc(f)||"noscript"===f||(n=n.replace(/<!--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),iu(f,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""});l+=e.length-h.length,e=h,r(f,l-p,l)}else{var v=e.indexOf("<");if(0===v){if(Rc.test(e)){var m=e.indexOf("--\x3e");if(m>=0){t.shouldKeepComment&&t.comment(e.substring(4,m)),n(m+3);continue}}if(Uc.test(e)){var y=e.indexOf("]>");if(y>=0){n(y+2);continue}}var g=e.match(Dc);if(g){n(g[0].length);continue}var b=e.match(Ic);if(b){var w=l;n(b[0].length),r(b[1],w,l);continue}var _=function(){var t=e.match(Mc);if(t){var r={tagName:t[1],attrs:[],start:l};n(t[0].length);for(var o,i;!(o=e.match(Lc))&&(i=e.match(Pc));)n(i[0].length),r.attrs.push(i);if(o)return r.unarySlash=o[1],n(o[0].length),r.end=l,r}}();if(_){!function(e){var n=e.tagName,o=e.unarySlash;a&&("p"===i&&Nc(n)&&r(i),u(n)&&i===n&&r(n));for(var l=c(n)||!!o,p=e.attrs.length,f=new Array(p),d=0;d<p;d++){var h=e.attrs[d];Hc&&-1===h[0].indexOf('""')&&(""===h[3]&&delete h[3],""===h[4]&&delete h[4],""===h[5]&&delete h[5]);var v=h[3]||h[4]||h[5]||"",m="a"===n&&"href"===h[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;f[d]={name:h[1],value:Xr(v,m)}}l||(s.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:f}),i=n),t.start&&t.start(n,f,l,e.start,e.end)}(_),iu(i,e)&&n(1);continue}}var k=void 0,x=void 0,C=void 0;if(v>=0){for(x=e.slice(v);!(Ic.test(x)||Mc.test(x)||Rc.test(x)||Uc.test(x)||(C=x.indexOf("<",1))<0);)v+=C,x=e.slice(v);k=e.substring(0,v),n(v)}v<0&&(k=e,e=""),t.chars&&k&&t.chars(k)}if(e===o){t.chars&&t.chars(e),!s.length&&t.warn&&t.warn('Mal-formatted tag at end of template: "'+e+'"');break}}r()}function Kr(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:vo(t),parent:n,children:[]}}function Yr(e,t){function n(e){l||(l=!0,Fc(e))}function r(e){e.pre&&(c=!1),Xc(e.tag)&&(u=!1);for(var n=0;n<Wc.length;n++)Wc[n](e,t)}Fc=t.warn||Tn,Xc=t.isPreTag||Ai,Jc=t.mustUseProp||Ai,Kc=t.getTagNamespace||Ai,zc=En(t.modules,"transformNode"),Vc=En(t.modules,"preTransformNode"),Wc=En(t.modules,"postTransformNode"),qc=t.delimiters;var o,i,s=[],a=!1!==t.preserveWhitespace,c=!1,u=!1,l=!1;return Jr(e,{warn:Fc,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,start:function(e,a,l){function p(e){"slot"!==e.tag&&"template"!==e.tag||n("Cannot use <"+e.tag+"> as component root element because it may contain multiple nodes."),e.attrsMap.hasOwnProperty("v-for")&&n("Cannot use v-for on stateful component root element because it renders multiple elements.")}var f=i&&i.ns||Kc(e);Ii&&"svg"===f&&(a=go(a));var d=Kr(e,a,i);f&&(d.ns=f),yo(d)&&!Ji()&&(d.forbidden=!0,Fc("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+e+">, as they will not be parsed."));for(var h=0;h<Vc.length;h++)d=Vc[h](d,t)||d;if(c||(Gr(d),d.pre&&(c=!0)),Xc(d.tag)&&(u=!0),c?Zr(d):d.processed||(no(d),oo(d),co(d),Qr(d,t)),o?s.length||(o.if&&(d.elseif||d.else)?(p(d),ao(o,{exp:d.elseif,block:d})):n("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.")):(o=d,p(o)),i&&!d.forbidden)if(d.elseif||d.else)io(d,i);else if(d.slotScope){i.plain=!1;var v=d.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[v]=d}else i.children.push(d),d.parent=i;l?r(d):(i=d,s.push(d))},end:function(){var e=s[s.length-1],t=e.children[e.children.length-1];t&&3===t.type&&" "===t.text&&!u&&e.children.pop(),s.length-=1,i=s[s.length-1],r(e)},chars:function(t){if(!i)return void(t===e?n("Component template requires a root element, rather than just text."):(t=t.trim())&&n('text "'+t+'" outside root element will be ignored.'));if(!Ii||"textarea"!==i.tag||i.attrsMap.placeholder!==t){var r=i.children;if(t=u||t.trim()?mo(i)?t:hu(t):a&&r.length?" ":""){var o;!c&&" "!==t&&(o=Fr(t,qc))?r.push({type:2,expression:o.expression,tokens:o.tokens,text:t}):" "===t&&r.length&&" "===r[r.length-1].text||r.push({type:3,text:t})}}},comment:function(e){i.children.push({type:3,text:e,isComment:!0})}}),o}function Gr(e){null!=In(e,"v-pre")&&(e.pre=!0)}function Zr(e){var t=e.attrsList.length;if(t)for(var n=e.attrs=new Array(t),r=0;r<t;r++)n[r]={name:e.attrsList[r].name,value:JSON.stringify(e.attrsList[r].value)};else e.pre||(e.plain=!0)}function Qr(e,t){eo(e),e.plain=!e.key&&!e.attrsList.length,to(e),uo(e),lo(e);for(var n=0;n<zc.length;n++)e=zc[n](e,t)||e;po(e)}function eo(e){var t=Ln(e,"key");t&&("template"===e.tag&&Fc("<template> cannot be keyed. Place the key on real elements instead."),e.key=t)}function to(e){var t=Ln(e,"ref");t&&(e.ref=t,e.refInFor=fo(e))}function no(e){var t;if(t=In(e,"v-for")){var n=ro(t);n?w(e,n):Fc("Invalid v-for expression: "+t)}}function ro(e){var t=e.match(cu);if(t){var n={};n.for=t[2].trim();var r=t[1].trim().replace(lu,""),o=r.match(uu);return o?(n.alias=r.replace(uu,""),n.iterator1=o[1].trim(),o[2]&&(n.iterator2=o[2].trim())):n.alias=r,n}}function oo(e){var t=In(e,"v-if");if(t)e.if=t,ao(e,{exp:t,block:e});else{null!=In(e,"v-else")&&(e.else=!0);var n=In(e,"v-else-if");n&&(e.elseif=n)}}function io(e,t){var n=so(t.children);n&&n.if?ao(n,{exp:e.elseif,block:e}):Fc("v-"+(e.elseif?'else-if="'+e.elseif+'"':"else")+" used on element <"+e.tag+"> without corresponding v-if.")}function so(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];" "!==e[t].text&&Fc('text "'+e[t].text.trim()+'" between v-if and v-else(-if) will be ignored.'),e.pop()}}function ao(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function co(e){null!=In(e,"v-once")&&(e.once=!0)}function uo(e){if("slot"===e.tag)e.slotName=Ln(e,"name"),e.key&&Fc("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.");else{var t;"template"===e.tag?(t=In(e,"scope"),t&&Fc('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',!0),e.slotScope=t||In(e,"slot-scope")):(t=In(e,"slot-scope"))&&(e.attrsMap["v-for"]&&Fc("Ambiguous combined usage of slot-scope and v-for on <"+e.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",!0),e.slotScope=t);var n=Ln(e,"slot");n&&(e.slotTarget='""'===n?'"default"':n,"template"===e.tag||e.slotScope||Pn(e,"slot",n))}}function lo(e){var t;(t=Ln(e,"is"))&&(e.component=t),null!=In(e,"inline-template")&&(e.inlineTemplate=!0)}function po(e){var t,n,r,o,i,s,a,c=e.attrsList;for(t=0,n=c.length;t<n;t++)if(r=o=c[t].name,i=c[t].value,au.test(r))if(e.hasBindings=!0,s=ho(r),s&&(r=r.replace(du,"")),fu.test(r))r=r.replace(fu,""),i=Sn(i),a=!1,s&&(s.prop&&(a=!0,"innerHtml"===(r=_i(r))&&(r="innerHTML")),s.camel&&(r=_i(r)),s.sync&&Mn(e,"update:"+_i(r),Rn(i,"$event"))),a||!e.component&&Jc(e.tag,e.attrsMap.type,r)?Nn(e,r,i):Pn(e,r,i);else if(su.test(r))r=r.replace(su,""),Mn(e,r,i,s,!1,Fc);else{r=r.replace(au,"");var u=r.match(pu),l=u&&u[1];l&&(r=r.slice(0,-(l.length+1))),Bn(e,r,o,i,l,s),"model"===r&&bo(e,i)}else{var p=Fr(i,qc);p&&Fc(r+'="'+i+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.'),Pn(e,r,JSON.stringify(i)),!e.component&&"muted"===r&&Jc(e.tag,e.attrsMap.type,r)&&Nn(e,r,"true")}}function fo(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function ho(e){var t=e.match(du);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function vo(e){for(var t={},n=0,r=e.length;n<r;n++)!t[e[n].name]||Ii||Ri||Fc("duplicate attribute: "+e[n].name),t[e[n].name]=e[n].value;return t}function mo(e){return"script"===e.tag||"style"===e.tag}function yo(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}function go(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];vu.test(r.name)||(r.name=r.name.replace(mu,""),t.push(r))}return t}function bo(e,t){for(var n=e;n;)n.for&&n.alias===t&&Fc("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.'),n=n.parent}function wo(e,t){if("input"===e.tag){var n=e.attrsMap;if(n["v-model"]&&(n["v-bind:type"]||n[":type"])){var r=Ln(e,"type"),o=In(e,"v-if",!0),i=o?"&&("+o+")":"",s=null!=In(e,"v-else",!0),a=In(e,"v-else-if",!0),c=_o(e);no(c),jn(c,"type","checkbox"),Qr(c,t),c.processed=!0,c.if="("+r+")==='checkbox'"+i,ao(c,{exp:c.if,block:c});var u=_o(e);In(u,"v-for",!0),jn(u,"type","radio"),Qr(u,t),ao(c,{exp:"("+r+")==='radio'"+i,block:u});var l=_o(e);return In(l,"v-for",!0),jn(l,":type",r),Qr(l,t),ao(c,{exp:o,block:l}),s?c.else=!0:a&&(c.elseif=a),c}}}function _o(e){return Kr(e.tag,e.attrsList.slice(),e.parent)}function ko(e,t){t.value&&Nn(e,"textContent","_s("+t.value+")")}function xo(e,t){t.value&&Nn(e,"innerHTML","_s("+t.value+")")}function Co(e,t){e&&(Yc=_u(t.staticKeys||""),Gc=t.isReservedTag||Ai,$o(e),So(e,!1))}function Ao(e){return h("type,tag,attrsList,attrsMap,plain,parent,children,attrs"+(e?","+e:""))}function $o(e){if(e.static=Oo(e),1===e.type){if(!Gc(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var r=e.children[t];$o(r),r.static||(e.static=!1)}if(e.ifConditions)for(var o=1,i=e.ifConditions.length;o<i;o++){var s=e.ifConditions[o].block;$o(s),s.static||(e.static=!1)}}}function So(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,r=e.children.length;n<r;n++)So(e.children[n],t||!!e.for);if(e.ifConditions)for(var o=1,i=e.ifConditions.length;o<i;o++)So(e.ifConditions[o].block,t)}}function Oo(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||yi(e.tag)||!Gc(e.tag)||To(e)||!Object.keys(e).every(Yc))))}function To(e){for(;e.parent;){if(e=e.parent,"template"!==e.tag)return!1;if(e.for)return!0}return!1}function Eo(e,t,n){var r=t?"nativeOn:{":"on:{";for(var o in e)r+='"'+o+'":'+No(o,e[o])+",";return r.slice(0,-1)+"}"}function No(e,t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map(function(t){return No(e,t)}).join(",")+"]";var n=xu.test(t.value),r=ku.test(t.value);if(t.modifiers){var o="",i="",s=[];for(var a in t.modifiers)if($u[a])i+=$u[a],Cu[a]&&s.push(a);else if("exact"===a){var c=t.modifiers;i+=Au(["ctrl","shift","alt","meta"].filter(function(e){return!c[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else s.push(a);s.length&&(o+=Po(s)),i&&(o+=i);return"function($event){"+o+(n?t.value+"($event)":r?"("+t.value+")($event)":t.value)+"}"}return n||r?t.value:"function($event){"+t.value+"}"}function Po(e){return"if(!('button' in $event)&&"+e.map(jo).join("&&")+")return null;"}function jo(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=Cu[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key)"}function Bo(e,t){t.modifiers&&Gi("v-on without argument does not support modifiers."),e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}}function Mo(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}}function Lo(e,t){var n=new Ou(t);return{render:"with(this){return "+(e?Io(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Io(e,t){if(e.staticRoot&&!e.staticProcessed)return Do(e,t);if(e.once&&!e.onceProcessed)return Ro(e,t);if(e.for&&!e.forProcessed)return Fo(e,t);if(e.if&&!e.ifProcessed)return Uo(e,t);if("template"!==e.tag||e.slotTarget){if("slot"===e.tag)return ti(e,t);var n;if(e.component)n=ni(e.component,e,t);else{var r=e.plain?void 0:qo(e,t),o=e.inlineTemplate?null:Ko(e,t,!0);n="_c('"+e.tag+"'"+(r?","+r:"")+(o?","+o:"")+")"}for(var i=0;i<t.transforms.length;i++)n=t.transforms[i](e,n);return n}return Ko(e,t)||"void 0"}function Do(e,t){return e.staticProcessed=!0,t.staticRenderFns.push("with(this){return "+Io(e,t)+"}"),"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function Ro(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return Uo(e,t);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+Io(e,t)+","+t.onceId+++","+n+")":(t.warn("v-once can only be used inside v-for that is keyed. "),Io(e,t))}return Do(e,t)}function Uo(e,t,n,r){return e.ifProcessed=!0,Ho(e.ifConditions.slice(),t,n,r)}function Ho(e,t,n,r){function o(e){return n?n(e,t):e.once?Ro(e,t):Io(e,t)}if(!e.length)return r||"_e()";var i=e.shift();return i.exp?"("+i.exp+")?"+o(i.block)+":"+Ho(e,t,n,r):""+o(i.block)}function Fo(e,t,n,r){var o=e.for,i=e.alias,s=e.iterator1?","+e.iterator1:"",a=e.iterator2?","+e.iterator2:"";return t.maybeComponent(e)&&"slot"!==e.tag&&"template"!==e.tag&&!e.key&&t.warn("<"+e.tag+' v-for="'+i+" in "+o+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',!0),e.forProcessed=!0,(r||"_l")+"(("+o+"),function("+i+s+a+"){return "+(n||Io)(e,t)+"})"}function qo(e,t){var n="{",r=zo(e,t);r&&(n+=r+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var o=0;o<t.dataGenFns.length;o++)n+=t.dataGenFns[o](e);if(e.attrs&&(n+="attrs:{"+ri(e.attrs)+"},"),e.props&&(n+="domProps:{"+ri(e.props)+"},"),e.events&&(n+=Eo(e.events,!1,t.warn)+","),e.nativeEvents&&(n+=Eo(e.nativeEvents,!0,t.warn)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=Wo(e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var i=Vo(e,t);i&&(n+=i+",")}return n=n.replace(/,$/,"")+"}",e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function zo(e,t){var n=e.directives;if(n){var r,o,i,s,a="directives:[",c=!1;for(r=0,o=n.length;r<o;r++){i=n[r],s=!0;var u=t.directives[i.name];u&&(s=!!u(e,i,t.warn)),s&&(c=!0,a+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?',arg:"'+i.arg+'"':"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}return c?a.slice(0,-1)+"]":void 0}}function Vo(e,t){var n=e.children[0]
;if(1===e.children.length&&1===n.type||t.warn("Inline-template components must have exactly one child element."),1===n.type){var r=Lo(n,t.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function Wo(e,t){return"scopedSlots:_u(["+Object.keys(e).map(function(n){return Xo(n,e[n],t)}).join(",")+"])"}function Xo(e,t,n){return t.for&&!t.forProcessed?Jo(e,t,n):"{key:"+e+",fn:function("+String(t.slotScope)+"){return "+("template"===t.tag?t.if?t.if+"?"+(Ko(t,n)||"undefined")+":undefined":Ko(t,n)||"undefined":Io(t,n))+"}}"}function Jo(e,t,n){var r=t.for,o=t.alias,i=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return t.forProcessed=!0,"_l(("+r+"),function("+o+i+s+"){return "+Xo(e,t,n)+"})"}function Ko(e,t,n,r,o){var i=e.children;if(i.length){var s=i[0];if(1===i.length&&s.for&&"template"!==s.tag&&"slot"!==s.tag)return(r||Io)(s,t);var a=n?Yo(i,t.maybeComponent):0,c=o||Zo;return"["+i.map(function(e){return c(e,t)}).join(",")+"]"+(a?","+a:"")}}function Yo(e,t){for(var n=0,r=0;r<e.length;r++){var o=e[r];if(1===o.type){if(Go(o)||o.ifConditions&&o.ifConditions.some(function(e){return Go(e.block)})){n=2;break}(t(o)||o.ifConditions&&o.ifConditions.some(function(e){return t(e.block)}))&&(n=1)}}return n}function Go(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Zo(e,t){return 1===e.type?Io(e,t):3===e.type&&e.isComment?ei(e):Qo(e)}function Qo(e){return"_v("+(2===e.type?e.expression:oi(JSON.stringify(e.text)))+")"}function ei(e){return"_e("+JSON.stringify(e.text)+")"}function ti(e,t){var n=e.slotName||'"default"',r=Ko(e,t),o="_t("+n+(r?","+r:""),i=e.attrs&&"{"+e.attrs.map(function(e){return _i(e.name)+":"+e.value}).join(",")+"}",s=e.attrsMap["v-bind"];return!i&&!s||r||(o+=",null"),i&&(o+=","+i),s&&(o+=(i?"":",null")+","+s),o+")"}function ni(e,t,n){var r=t.inlineTemplate?null:Ko(t,n,!0);return"_c("+e+","+qo(t,n)+(r?","+r:"")+")"}function ri(e){for(var t="",n=0;n<e.length;n++){var r=e[n];t+='"'+r.name+'":'+oi(r.value)+","}return t.slice(0,-1)}function oi(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function ii(e){var t=[];return e&&si(e,t),t}function si(e,t){if(1===e.type){for(var n in e.attrsMap)if(au.test(n)){var r=e.attrsMap[n];r&&("v-for"===n?ci(e,'v-for="'+r+'"',t):su.test(n)?ai(r,n+'="'+r+'"',t):li(r,n+'="'+r+'"',t))}if(e.children)for(var o=0;o<e.children.length;o++)si(e.children[o],t)}else 2===e.type&&li(e.expression,e.text,t)}function ai(e,t,n){var r=e.replace(Nu,""),o=r.match(Eu);o&&"$"!==r.charAt(o.index-1)&&n.push('avoid using JavaScript unary operator as property name: "'+o[0]+'" in expression '+t.trim()),li(e,t,n)}function ci(e,t,n){li(e.for||"",t,n),ui(e.alias,"v-for alias",t,n),ui(e.iterator1,"v-for iterator",t,n),ui(e.iterator2,"v-for iterator",t,n)}function ui(e,t,n,r){if("string"==typeof e)try{new Function("var "+e+"=_")}catch(o){r.push("invalid "+t+' "'+e+'" in expression: '+n.trim())}}function li(e,t,n){try{new Function("return "+e)}catch(o){var r=e.replace(Nu,"").match(Tu);r?n.push('avoid using JavaScript keyword as property name: "'+r[0]+'"\n  Raw expression: '+t.trim()):n.push("invalid expression: "+o.message+" in\n\n    "+e+"\n\n  Raw expression: "+t.trim()+"\n")}}function pi(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),k}}function fi(e){var t=Object.create(null);return function(n,r,o){r=w({},r);var i=r.warn||Gi;delete r.warn;try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&i("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var s=r.delimiters?String(r.delimiters)+n:n;if(t[s])return t[s];var a=e(n,r);a.errors&&a.errors.length&&i("Error compiling template:\n\n"+n+"\n\n"+a.errors.map(function(e){return"- "+e}).join("\n")+"\n",o),a.tips&&a.tips.length&&a.tips.forEach(function(e){return Zi(e,o)});var c={},u=[];return c.render=pi(a.render,u),c.staticRenderFns=a.staticRenderFns.map(function(e){return pi(e,u)}),a.errors&&a.errors.length||!u.length||i("Failed to generate render function:\n\n"+u.map(function(e){var t=e.err,n=e.code;return t.toString()+" in\n\n"+n+"\n"}).join("\n"),o),t[s]=c}}function di(e){return Zc=Zc||document.createElement("div"),Zc.innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',Zc.innerHTML.indexOf("&#10;")>0}function hi(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}var vi=Object.freeze({}),mi=Object.prototype.toString,yi=h("slot,component",!0),gi=h("key,ref,slot,slot-scope,is"),bi=Object.prototype.hasOwnProperty,wi=/-(\w)/g,_i=y(function(e){return e.replace(wi,function(e,t){return t?t.toUpperCase():""})}),ki=y(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),xi=/\B([A-Z])/g,Ci=y(function(e){return e.replace(xi,"-$1").toLowerCase()}),Ai=function(e,t,n){return!1},$i=function(e){return e},Si="data-server-rendered",Oi=["component","directive","filter"],Ti=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured"],Ei={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:Ai,isReservedAttr:Ai,isUnknownElement:Ai,getTagNamespace:k,parsePlatformTagName:$i,mustUseProp:Ai,_lifecycleHooks:Ti},Ni=/[^\w.$]/,Pi="__proto__"in{},ji="undefined"!=typeof window,Bi="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,Mi=Bi&&WXEnvironment.platform.toLowerCase(),Li=ji&&window.navigator.userAgent.toLowerCase(),Ii=Li&&/msie|trident/.test(Li),Di=Li&&Li.indexOf("msie 9.0")>0,Ri=Li&&Li.indexOf("edge/")>0,Ui=Li&&Li.indexOf("android")>0||"android"===Mi,Hi=Li&&/iphone|ipad|ipod|ios/.test(Li)||"ios"===Mi,Fi=Li&&/chrome\/\d+/.test(Li)&&!Ri,qi={}.watch,zi=!1;if(ji)try{var Vi={};Object.defineProperty(Vi,"passive",{get:function(){zi=!0}}),window.addEventListener("test-passive",null,Vi)}catch(e){}var Wi,Xi,Ji=function(){return void 0===Wi&&(Wi=!ji&&void 0!==n&&"server"===n.process.env.VUE_ENV),Wi},Ki=ji&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Yi="undefined"!=typeof Symbol&&T(Symbol)&&"undefined"!=typeof Reflect&&T(Reflect.ownKeys);Xi="undefined"!=typeof Set&&T(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var Gi=k,Zi=k,Qi=k,es=k,ts="undefined"!=typeof console,ns=/(?:^|[-_])(\w)/g,rs=function(e){return e.replace(ns,function(e){return e.toUpperCase()}).replace(/[-_]/g,"")};Gi=function(e,t){var n=t?Qi(t):"";Ei.warnHandler?Ei.warnHandler.call(null,e,t,n):ts&&!Ei.silent&&console.error("[Vue warn]: "+e+n)},Zi=function(e,t){ts&&!Ei.silent&&console.warn("[Vue tip]: "+e+(t?Qi(t):""))},es=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e||{},r=n.name||n._componentTag,o=n.__file;if(!r&&o){var i=o.match(/([^\/\\]+)\.vue$/);r=i&&i[1]}return(r?"<"+rs(r)+">":"<Anonymous>")+(o&&!1!==t?" at "+o:"")};var os=function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n};Qi=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map(function(e,t){return""+(0===t?"---\x3e ":os(" ",5+2*t))+(Array.isArray(e)?es(e[0])+"... ("+e[1]+" recursive calls)":es(e))}).join("\n")}return"\n\n(found in "+es(e)+")"};var is=0,ss=function(){this.id=is++,this.subs=[]};ss.prototype.addSub=function(e){this.subs.push(e)},ss.prototype.removeSub=function(e){v(this.subs,e)},ss.prototype.depend=function(){ss.target&&ss.target.addDep(this)},ss.prototype.notify=function(){for(var e=this.subs.slice(),t=0,n=e.length;t<n;t++)e[t].update()},ss.target=null;var as=[],cs=function(e,t,n,r,o,i,s,a){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=a,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},us={child:{configurable:!0}};us.child.get=function(){return this.componentInstance},Object.defineProperties(cs.prototype,us);var ls=function(e){void 0===e&&(e="");var t=new cs;return t.text=e,t.isComment=!0,t},ps=Array.prototype,fs=Object.create(ps);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(e){var t=ps[e];S(fs,e,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=t.apply(this,n),s=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&s.observeArray(o),s.dep.notify(),i})});var ds=Object.getOwnPropertyNames(fs),hs={shouldConvert:!0},vs=function(e){if(this.value=e,this.dep=new ss,this.vmCount=0,S(e,"__ob__",this),Array.isArray(e)){(Pi?M:L)(e,fs,ds),this.observeArray(e)}else this.walk(e)};vs.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)D(e,t[n],e[t[n]])},vs.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)I(e[t])};var ms=Ei.optionMergeStrategies;ms.el=ms.propsData=function(e,t,n,r){return n||Gi('option "'+r+'" can only be used during instance creation with the `new` keyword.'),bs(e,t)},ms.data=function(e,t,n){return n?q(e,t,n):t&&"function"!=typeof t?(Gi('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):q(e,t)},Ti.forEach(function(e){ms[e]=z}),Oi.forEach(function(e){ms[e+"s"]=V}),ms.watch=function(e,t,n,r){if(e===qi&&(e=void 0),t===qi&&(t=void 0),!t)return Object.create(e||null);if(G(r,t,n),!e)return t;var o={};w(o,e);for(var i in t){var s=o[i],a=t[i];s&&!Array.isArray(s)&&(s=[s]),o[i]=s?s.concat(a):Array.isArray(a)?a:[a]}return o},ms.props=ms.methods=ms.inject=ms.computed=function(e,t,n,r){if(t&&G(r,t,n),!e)return t;var o=Object.create(null);return w(o,e),t&&w(o,t),o},ms.provide=q;var ys,gs,bs=function(e,t){return void 0===t?e:t},ws=/^(String|Number|Boolean|Function|Symbol)$/,_s=[],ks=!1,xs=!1;if("undefined"!=typeof setImmediate&&T(setImmediate))gs=function(){setImmediate(ue)};else if("undefined"==typeof MessageChannel||!T(MessageChannel)&&"[object MessageChannelConstructor]"!==MessageChannel.toString())gs=function(){setTimeout(ue,0)};else{var Cs=new MessageChannel,As=Cs.port2;Cs.port1.onmessage=ue,gs=function(){As.postMessage(1)}}if("undefined"!=typeof Promise&&T(Promise)){var $s=Promise.resolve();ys=function(){$s.then(ue),Hi&&setTimeout(k)}}else ys=gs;var Ss,Os,Ts=ji&&window.performance;Ts&&Ts.mark&&Ts.measure&&Ts.clearMarks&&Ts.clearMeasures&&(Ss=function(e){return Ts.mark(e)},Os=function(e,t,n){Ts.measure(e,t,n),Ts.clearMarks(t),Ts.clearMarks(n),Ts.clearMeasures(e)});var Es,Ns=h("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Ps=function(e,t){Gi('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},js="undefined"!=typeof Proxy&&Proxy.toString().match(/native code/);if(js){var Bs=h("stop,prevent,self,ctrl,shift,alt,meta,exact");Ei.keyCodes=new Proxy(Ei.keyCodes,{set:function(e,t,n){return Bs(t)?(Gi("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var Ms={has:function(e,t){var n=t in e,r=Ns(t)||"_"===t.charAt(0);return n||r||Ps(e,t),n||!r}},Ls={get:function(e,t){return"string"!=typeof t||t in e||Ps(e,t),e[t]}};Es=function(e){if(js){var t=e.$options,n=t.render&&t.render._withStripped?Ls:Ms;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var Is,Ds=new Xi,Rs=y(function(e){var t="&"===e.charAt(0);e=t?e.slice(1):e;var n="~"===e.charAt(0);e=n?e.slice(1):e;var r="!"===e.charAt(0);return e=r?e.slice(1):e,{name:e,once:n,capture:r,passive:t}}),Us=null,Hs=!1,Fs=100,qs=[],zs=[],Vs={},Ws={},Xs=!1,Js=!1,Ks=0,Ys=0,Gs=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Ys,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new Xi,this.newDepIds=new Xi,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=O(t),this.getter||(this.getter=function(){},Gi('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Gs.prototype.get=function(){E(this);var e,t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;se(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&fe(e),N(),this.cleanupDeps()}return e},Gs.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Gs.prototype.cleanupDeps=function(){for(var e=this,t=this.deps.length;t--;){var n=e.deps[t];e.newDepIds.has(n.id)||n.removeSub(e)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},Gs.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():Xe(this)},Gs.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||a(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){se(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},Gs.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Gs.prototype.depend=function(){for(var e=this,t=this.deps.length;t--;)e.deps[t].depend()},Gs.prototype.teardown=function(){var e=this;if(this.active){this.vm._isBeingDestroyed||v(this.vm._watchers,this);for(var t=this.deps.length;t--;)e.deps[t].removeSub(e);this.active=!1}};var Zs={enumerable:!0,configurable:!0,get:k,set:k},Qs={lazy:!0};gt(bt.prototype);var ea={init:function(e,t,n,r){if(!e.componentInstance||e.componentInstance._isDestroyed){(e.componentInstance=xt(e,Us,n,r)).$mount(t?e.elm:void 0,t)}else if(e.data.keepAlive){var o=e;ea.prepatch(o,o)}},prepatch:function(e,t){var n=t.componentOptions;Ie(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t=e.context,n=e.componentInstance;n._isMounted||(n._isMounted=!0,He(n,"mounted")),e.data.keepAlive&&(t._isMounted?Ve(n):Re(n,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?Ue(t,!0):t.$destroy())}},ta=Object.keys(ea),na=1,ra=2,oa=0;!function(e){e.prototype._init=function(e){var t=this;t._uid=oa++;var n,r;Ei.performance&&Ss&&(n="vue-perf-start:"+t._uid,r="vue-perf-end:"+t._uid,Ss(n)),t._isVue=!0,e&&e._isComponent?Nt(t,e):t.$options=Z(Pt(t.constructor),e||{},t),Es(t),t._self=t,Me(t),Oe(t),Et(t),He(t,"beforeCreate"),st(t),Ke(t),it(t),He(t,"created"),Ei.performance&&Ss&&(t._name=es(t,!1),Ss(r),Os("vue "+t._name+" init",n,r)),t.$options.el&&t.$mount(t.$options.el)}}(Mt),function(e){var t={};t.get=function(){return this._data};var n={};n.get=function(){return this._props},t.set=function(e){Gi("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){Gi("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=R,e.prototype.$delete=U,e.prototype.$watch=function(e,t,n){var r=this;if(u(t))return ot(r,e,t,n);n=n||{},n.user=!0;var o=new Gs(r,e,t,n);return n.immediate&&t.call(r,o.value),function(){o.teardown()}}}(Mt),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this,o=this;if(Array.isArray(e))for(var i=0,s=e.length;i<s;i++)r.$on(e[i],n);else(o._events[e]||(o._events[e]=[])).push(n),t.test(e)&&(o._hasHookEvent=!0);return o},e.prototype.$once=function(e,t){function n(){r.$off(e,n),t.apply(r,arguments)}var r=this;return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var n=this,r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Array.isArray(e)){for(var o=0,i=e.length;o<i;o++)n.$off(e[o],t);return r}var s=r._events[e];if(!s)return r;if(!t)return r._events[e]=null,r;if(t)for(var a,c=s.length;c--;)if((a=s[c])===t||a.fn===t){s.splice(c,1);break}return r},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&Zi('Event "'+n+'" is emitted in component '+es(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+Ci(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?b(r):r;for(var o=b(arguments,1),i=0,s=r.length;i<s;i++)try{r[i].apply(t,o)}catch(n){se(n,t,'event handler for "'+e+'"')}}return t}}(Mt),function(e){e.prototype._update=function(e,t){var n=this;n._isMounted&&He(n,"beforeUpdate");var r=n.$el,o=n._vnode,i=Us;Us=n,n._vnode=e,o?n.$el=n.__patch__(o,e):(n.$el=n.__patch__(n.$el,e,t,!1,n.$options._parentElm,n.$options._refElm),n.$options._parentElm=n.$options._refElm=null),Us=i,r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){var e=this;e._watcher&&e._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){He(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||v(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),He(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Mt),function(e){gt(e.prototype),e.prototype.$nextTick=function(e){return pe(e,this)},e.prototype._render=function(){var e=this,t=e.$options,n=t.render,r=t._parentVnode;if(e._isMounted)for(var o in e.$slots){var i=e.$slots[o];(i._rendered||i[0]&&i[0].elm)&&(e.$slots[o]=B(i,!0))}e.$scopedSlots=r&&r.data.scopedSlots||vi,e.$vnode=r;var s;try{s=n.call(e._renderProxy,e.$createElement)}catch(t){if(se(t,e,"render"),e.$options.renderError)try{s=e.$options.renderError.call(e._renderProxy,e.$createElement,t)}catch(t){se(t,e,"renderError"),s=e._vnode}else s=e._vnode}return s instanceof cs||(Array.isArray(s)&&Gi("Multiple root nodes returned from render function. Render function should return a single root node.",e),s=ls()),s.parent=r,s}}(Mt);var ia=[String,RegExp,Array],sa={name:"keep-alive",abstract:!0,props:{include:ia,exclude:ia,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){var e=this;for(var t in e.cache)Vt(e.cache,t,e.keys)},watch:{include:function(e){zt(this,function(t){return qt(e,t)})},exclude:function(e){zt(this,function(t){return!qt(e,t)})}},render:function(){var e=this.$slots.default,t=Se(e),n=t&&t.componentOptions;if(n){var r=Ft(n),o=this,i=o.include,s=o.exclude;if(i&&(!r||!qt(i,r))||s&&r&&qt(s,r))return t;var a=this,c=a.cache,u=a.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;c[l]?(t.componentInstance=c[l].componentInstance,v(u,l),u.push(l)):(c[l]=t,u.push(l),this.max&&u.length>parseInt(this.max)&&Vt(c,u[0],u,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}},aa={KeepAlive:sa};!function(e){var t={};t.get=function(){return Ei},t.set=function(){Gi("Do not replace the Vue.config object, set individual fields instead.")},Object.defineProperty(e,"config",t),e.util={warn:Gi,extend:w,mergeOptions:Z,defineReactive:D},e.set=R,e.delete=U,e.nextTick=pe,e.options=Object.create(null),Oi.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,w(e.options.components,aa),Lt(e),It(e),Dt(e),Ht(e)}(Mt),Object.defineProperty(Mt.prototype,"$isServer",{get:Ji}),Object.defineProperty(Mt.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Mt.version="2.5.13";var ca,ua,la,pa,fa,da,ha,va,ma,ya=h("style,class"),ga=h("input,textarea,option,select,progress"),ba=function(e,t,n){return"value"===n&&ga(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},wa=h("contenteditable,draggable,spellcheck"),_a=h("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),ka="http://www.w3.org/1999/xlink",xa=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},Ca=function(e){return xa(e)?e.slice(6,e.length):""},Aa=function(e){return null==e||!1===e},$a={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Sa=h("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Oa=h("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ta=function(e){return"pre"===e},Ea=function(e){return Sa(e)||Oa(e)},Na=Object.create(null),Pa=h("text,number,password,search,email,tel,url"),ja=Object.freeze({createElement:nn,createElementNS:rn,createTextNode:on,createComment:sn,insertBefore:an,removeChild:cn,appendChild:un,parentNode:ln,nextSibling:pn,tagName:fn,setTextContent:dn,setAttribute:hn}),Ba={create:function(e,t){vn(t)},update:function(e,t){e.data.ref!==t.data.ref&&(vn(e,!0),vn(t))},destroy:function(e){vn(e,!0)}},Ma=new cs("",{},[]),La=["create","activate","update","remove","destroy"],Ia={create:bn,update:bn,destroy:function(e){bn(e,Ma)}},Da=Object.create(null),Ra=[Ba,Ia],Ua={create:Cn,update:Cn},Ha={create:$n,update:$n},Fa=/[\w).+\-_$\]]/,qa="__r",za="__c",Va={create:tr,update:tr},Wa={create:nr,update:nr},Xa=y(function(e){var t={},n=/;(?![^(]*\))/g,r=/:(.+)/;return e.split(n).forEach(function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t}),Ja=/^--/,Ka=/\s*!important$/,Ya=function(e,t,n){if(Ja.test(t))e.style.setProperty(t,n);else if(Ka.test(n))e.style.setProperty(t,n.replace(Ka,""),"important");else{var r=Za(t);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)e.style[r]=n[o];else e.style[r]=n}},Ga=["Webkit","Moz","ms"],Za=y(function(e){if(ma=ma||document.createElement("div").style,"filter"!==(e=_i(e))&&e in ma)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Ga.length;n++){var r=Ga[n]+t;if(r in ma)return r}}),Qa={create:ur,update:ur},ec=y(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),tc=ji&&!Di,nc="transition",rc="animation",oc="transition",ic="transitionend",sc="animation",ac="animationend";tc&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(oc="WebkitTransition",ic="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(sc="WebkitAnimation",ac="webkitAnimationEnd"));var cc=ji?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()},uc=/\b(transform|all)(,|$)/,lc=ji?{create:Ar,activate:Ar,remove:function(e,t){!0!==e.data.show?_r(e,t):t()}}:{},pc=[Ua,Ha,Va,Wa,Qa,lc],fc=pc.concat(Ra),dc=function(e){function n(e){return new cs(M.tagName(e).toLowerCase(),{},[],void 0,e)}function i(e,t){function n(){0==--n.listeners&&a(e)}return n.listeners=t,n}function a(e){var t=M.parentNode(e);r(t)&&M.removeChild(t,e)}function c(e,t){return!t&&!e.ns&&!(Ei.ignoredElements.length&&Ei.ignoredElements.some(function(t){return l(t)?t.test(e.tag):t===e.tag}))&&Ei.isUnknownElement(e.tag)}function u(e,t,n,i,s){if(e.isRootInsert=!s,!p(e,t,n,i)){var a=e.data,u=e.children,l=e.tag;r(l)?(a&&a.pre&&L++,c(e,L)&&Gi("Unknown custom element: <"+l+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?M.createElementNS(e.ns,l):M.createElement(l,e),b(e),m(e,u,t),r(a)&&g(e,t),v(n,e.elm,i),a&&a.pre&&L--):o(e.isComment)?(e.elm=M.createComment(e.text),v(n,e.elm,i)):(e.elm=M.createTextNode(e.text),v(n,e.elm,i))}}function p(e,t,n,i){var s=e.data;if(r(s)){var a=r(e.componentInstance)&&s.keepAlive;if(r(s=s.hook)&&r(s=s.init)&&s(e,!1,n,i),r(e.componentInstance))return f(e,t),o(a)&&d(e,t,n,i),!0}}function f(e,t){r(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,y(e)?(g(e,t),b(e)):(vn(e),t.push(e))}function d(e,t,n,o){for(var i,s=e;s.componentInstance;)if(s=s.componentInstance._vnode,r(i=s.data)&&r(i=i.transition)){for(i=0;i<j.activate.length;++i)j.activate[i](Ma,s);t.push(s);break}v(n,e.elm,o)}function v(e,t,n){r(e)&&(r(n)?n.parentNode===e&&M.insertBefore(e,t,n):M.appendChild(e,t))}function m(e,t,n){if(Array.isArray(t)){A(t);for(var r=0;r<t.length;++r)u(t[r],n,e.elm,null,!0)}else s(e.text)&&M.appendChild(e.elm,M.createTextNode(String(e.text)))}function y(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return r(e.tag)}function g(e,t){for(var n=0;n<j.create.length;++n)j.create[n](Ma,e);N=e.data.hook,r(N)&&(r(N.create)&&N.create(Ma,e),r(N.insert)&&t.push(e))}function b(e){var t;if(r(t=e.fnScopeId))M.setAttribute(e.elm,t,"");else for(var n=e;n;)r(t=n.context)&&r(t=t.$options._scopeId)&&M.setAttribute(e.elm,t,""),n=n.parent;r(t=Us)&&t!==e.context&&t!==e.fnContext&&r(t=t.$options._scopeId)&&M.setAttribute(e.elm,t,"")}function w(e,t,n,r,o,i){for(;r<=o;++r)u(n[r],i,e,t)}function _(e){var t,n,o=e.data;if(r(o))for(r(t=o.hook)&&r(t=t.destroy)&&t(e),t=0;t<j.destroy.length;++t)j.destroy[t](e);if(r(t=e.children))for(n=0;n<e.children.length;++n)_(e.children[n])}function k(e,t,n,o){for(;n<=o;++n){var i=t[n];r(i)&&(r(i.tag)?(x(i),_(i)):a(i.elm))}}function x(e,t){if(r(t)||r(e.data)){var n,o=j.remove.length+1;for(r(t)?t.listeners+=o:t=i(e.elm,o),r(n=e.componentInstance)&&r(n=n._vnode)&&r(n.data)&&x(n,t),n=0;n<j.remove.length;++n)j.remove[n](e,t);r(n=e.data.hook)&&r(n=n.remove)?n(e,t):t()}else a(e.elm)}function C(e,n,o,i,s){var a,c,l,p,f=0,d=0,h=n.length-1,v=n[0],m=n[h],y=o.length-1,g=o[0],b=o[y],_=!s;for(A(o);f<=h&&d<=y;)t(v)?v=n[++f]:t(m)?m=n[--h]:mn(v,g)?(S(v,g,i),v=n[++f],g=o[++d]):mn(m,b)?(S(m,b,i),m=n[--h],b=o[--y]):mn(v,b)?(S(v,b,i),_&&M.insertBefore(e,v.elm,M.nextSibling(m.elm)),v=n[++f],b=o[--y]):mn(m,g)?(S(m,g,i),_&&M.insertBefore(e,m.elm,v.elm),m=n[--h],g=o[++d]):(t(a)&&(a=gn(n,f,h)),c=r(g.key)?a[g.key]:$(g,n,f,h),t(c)?u(g,i,e,v.elm):(l=n[c],mn(l,g)?(S(l,g,i),n[c]=void 0,_&&M.insertBefore(e,l.elm,v.elm)):u(g,i,e,v.elm)),g=o[++d]);f>h?(p=t(o[y+1])?null:o[y+1].elm,w(e,p,o,d,y,i)):d>y&&k(e,n,f,h)}function A(e){for(var t={},n=0;n<e.length;n++){var o=e[n],i=o.key;r(i)&&(t[i]?Gi("Duplicate keys detected: '"+i+"'. This may cause an update error.",o.context):t[i]=!0)}}function $(e,t,n,o){for(var i=n;i<o;i++){var s=t[i];if(r(s)&&mn(e,s))return i}}function S(e,n,i,s){if(e!==n){var a=n.elm=e.elm;if(o(e.isAsyncPlaceholder))return void(r(n.asyncFactory.resolved)?T(e.elm,n,i):n.isAsyncPlaceholder=!0);if(o(n.isStatic)&&o(e.isStatic)&&n.key===e.key&&(o(n.isCloned)||o(n.isOnce)))return void(n.componentInstance=e.componentInstance);var c,u=n.data;r(u)&&r(c=u.hook)&&r(c=c.prepatch)&&c(e,n);var l=e.children,p=n.children;if(r(u)&&y(n)){for(c=0;c<j.update.length;++c)j.update[c](e,n);r(c=u.hook)&&r(c=c.update)&&c(e,n)}t(n.text)?r(l)&&r(p)?l!==p&&C(a,l,p,i,s):r(p)?(r(e.text)&&M.setTextContent(a,""),w(a,null,p,0,p.length-1,i)):r(l)?k(a,l,0,l.length-1):r(e.text)&&M.setTextContent(a,""):e.text!==n.text&&M.setTextContent(a,n.text),r(u)&&r(c=u.hook)&&r(c=c.postpatch)&&c(e,n)}}function O(e,t,n){if(o(n)&&r(e.parent))e.parent.data.pendingInsert=t;else for(var i=0;i<t.length;++i)t[i].data.hook.insert(t[i])}function T(e,t,n,i){var s,a=t.tag,c=t.data,u=t.children;if(i=i||c&&c.pre,t.elm=e,o(t.isComment)&&r(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!E(e,t,i))return!1;if(r(c)&&(r(s=c.hook)&&r(s=s.init)&&s(t,!0),r(s=t.componentInstance)))return f(t,n),!0;if(r(a)){if(r(u))if(e.hasChildNodes())if(r(s=c)&&r(s=s.domProps)&&r(s=s.innerHTML)){if(s!==e.innerHTML)return"undefined"==typeof console||I||(I=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",s),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var l=!0,p=e.firstChild,d=0;d<u.length;d++){if(!p||!T(p,u[d],n,i)){l=!1;break}p=p.nextSibling}if(!l||p)return"undefined"==typeof console||I||(I=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,u)),!1}else m(t,u,n);if(r(c)){var h=!1;for(var v in c)if(!D(v)){h=!0,g(t,n);break}!h&&c.class&&fe(c.class)}}else e.data!==t.text&&(e.data=t.text);return!0}function E(e,t,n){return r(t.tag)?0===t.tag.indexOf("vue-component")||!c(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}var N,P,j={},B=e.modules,M=e.nodeOps;for(N=0;N<La.length;++N)for(j[La[N]]=[],P=0;P<B.length;++P)r(B[P][La[N]])&&j[La[N]].push(B[P][La[N]]);var L=0,I=!1,D=h("attrs,class,staticClass,staticStyle,key");return function(e,i,s,a,c,l){if(t(i))return void(r(e)&&_(e));var p=!1,f=[];if(t(e))p=!0,u(i,f,c,l);else{var d=r(e.nodeType);if(!d&&mn(e,i))S(e,i,f,a);else{if(d){if(1===e.nodeType&&e.hasAttribute(Si)&&(e.removeAttribute(Si),s=!0),o(s)){if(T(e,i,f))return O(i,f,!0),e;Gi("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}e=n(e)}var h=e.elm,v=M.parentNode(h);if(u(i,f,h._leaveCb?null:v,M.nextSibling(h)),r(i.parent))for(var m=i.parent,g=y(i);m;){for(var b=0;b<j.destroy.length;++b)j.destroy[b](m);if(m.elm=i.elm,g){for(var w=0;w<j.create.length;++w)j.create[w](Ma,m);var x=m.data.hook.insert;if(x.merged)for(var C=1;C<x.fns.length;C++)x.fns[C]()}else vn(m);m=m.parent}r(v)?k(v,[e],0,0):r(e.tag)&&_(e)}}return O(i,f,p),i.elm}}({nodeOps:ja,modules:fc});Di&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&Pr(e,"input")});var hc={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?me(n,"postpatch",function(){hc.componentUpdated(e,t,n)}):$r(e,t,n.context),e._vOptions=[].map.call(e.options,Tr)):("textarea"===n.tag||Pa(e.type))&&(e._vModifiers=t.modifiers,
t.modifiers.lazy||(e.addEventListener("change",Nr),Ui||(e.addEventListener("compositionstart",Er),e.addEventListener("compositionend",Nr)),Di&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){$r(e,t,n.context);var r=e._vOptions,o=e._vOptions=[].map.call(e.options,Tr);if(o.some(function(e,t){return!x(e,r[t])})){(e.multiple?t.value.some(function(e){return Or(e,o)}):t.value!==t.oldValue&&Or(t.value,o))&&Pr(e,"change")}}}},vc={bind:function(e,t,n){var r=t.value;n=jr(n);var o=n.data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o?(n.data.show=!0,wr(n,function(){e.style.display=i})):e.style.display=r?i:"none"},update:function(e,t,n){var r=t.value;r!==t.oldValue&&(n=jr(n),n.data&&n.data.transition?(n.data.show=!0,r?wr(n,function(){e.style.display=e.__vOriginalDisplay}):_r(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}},mc={model:hc,show:vc},yc={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]},gc={name:"transition",props:yc,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(function(e){return e.tag||$e(e)}),n.length)){n.length>1&&Gi("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&Gi("invalid <transition> mode: "+r,this.$parent);var o=n[0];if(Ir(this.$vnode))return o;var i=Br(o);if(!i)return o;if(this._leaving)return Lr(e,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var c=(i.data||(i.data={})).transition=Mr(this),u=this._vnode,l=Br(u);if(i.data.directives&&i.data.directives.some(function(e){return"show"===e.name})&&(i.data.show=!0),l&&l.data&&!Dr(i,l)&&!$e(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var p=l.data.transition=w({},c);if("out-in"===r)return this._leaving=!0,me(p,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),Lr(e,o);if("in-out"===r){if($e(i))return u;var f,d=function(){f()};me(c,"afterEnter",d),me(c,"enterCancelled",d),me(p,"delayLeave",function(e){f=e})}}return o}}},bc=w({tag:String,moveClass:String},yc);delete bc.mode;var wc={props:bc,render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],s=Mr(this),a=0;a<o.length;a++){var c=o[a];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),n[c.key]=c,(c.data||(c.data={})).transition=s;else{var u=c.componentOptions,l=u?u.Ctor.options.name||u.tag||"":c.tag;Gi("<transition-group> children must be keyed: <"+l+">")}}if(r){for(var p=[],f=[],d=0;d<r.length;d++){var h=r[d];h.data.transition=s,h.data.pos=h.elm.getBoundingClientRect(),n[h.key]?p.push(h):f.push(h)}this.kept=e(t,null,p),this.removed=f}return e(t,null,i)},beforeUpdate:function(){this.__patch__(this._vnode,this.kept,!1,!0),this._vnode=this.kept},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Rr),e.forEach(Ur),e.forEach(Hr),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;hr(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(ic,n._moveCb=function e(r){r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(ic,e),n._moveCb=null,vr(n,t))})}}))},methods:{hasMove:function(e,t){if(!tc)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){pr(n,e)}),lr(n,t),n.style.display="none",this.$el.appendChild(n);var r=yr(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}},_c={Transition:gc,TransitionGroup:wc};Mt.config.mustUseProp=ba,Mt.config.isReservedTag=Ea,Mt.config.isReservedAttr=ya,Mt.config.getTagNamespace=Qt,Mt.config.isUnknownElement=en,w(Mt.options.directives,mc),w(Mt.options.components,_c),Mt.prototype.__patch__=ji?dc:k,Mt.prototype.$mount=function(e,t){return e=e&&ji?tn(e):void 0,Le(this,e,t)},Mt.nextTick(function(){Ei.devtools&&(Ki?Ki.emit("init",Mt):Fi&&console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==Ei.productionTip&&ji&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var kc,xc=/\{\{((?:.|\n)+?)\}\}/g,Cc=/[-.*+?^${}()|[\]\/\\]/g,Ac=y(function(e){var t=e[0].replace(Cc,"\\$&"),n=e[1].replace(Cc,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}),$c={staticKeys:["staticClass"],transformNode:qr,genData:zr},Sc={staticKeys:["staticStyle"],transformNode:Vr,genData:Wr},Oc={decode:function(e){return kc=kc||document.createElement("div"),kc.innerHTML=e,kc.textContent}},Tc=h("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),Ec=h("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),Nc=h("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Pc=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,jc="[a-zA-Z_][\\w\\-\\.]*",Bc="((?:"+jc+"\\:)?"+jc+")",Mc=new RegExp("^<"+Bc),Lc=/^\s*(\/?)>/,Ic=new RegExp("^<\\/"+Bc+"[^>]*>"),Dc=/^<!DOCTYPE [^>]+>/i,Rc=/^<!--/,Uc=/^<!\[/,Hc=!1;"x".replace(/x(.)?/g,function(e,t){Hc=""===t});var Fc,qc,zc,Vc,Wc,Xc,Jc,Kc,Yc,Gc,Zc,Qc=h("script,style,textarea",!0),eu={},tu={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t"},nu=/&(?:lt|gt|quot|amp);/g,ru=/&(?:lt|gt|quot|amp|#10|#9);/g,ou=h("pre,textarea",!0),iu=function(e,t){return e&&ou(e)&&"\n"===t[0]},su=/^@|^v-on:/,au=/^v-|^@|^:/,cu=/(.*?)\s+(?:in|of)\s+(.*)/,uu=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,lu=/^\(|\)$/g,pu=/:(.*)$/,fu=/^:|^v-bind:/,du=/\.[^.]+/g,hu=y(Oc.decode),vu=/^xmlns:NS\d+/,mu=/^NS\d+:/,yu={preTransformNode:wo},gu=[$c,Sc,yu],bu={model:Wn,text:ko,html:xo},wu={expectHTML:!0,modules:gu,directives:bu,isPreTag:Ta,isUnaryTag:Tc,mustUseProp:ba,canBeLeftOpenTag:Ec,isReservedTag:Ea,getTagNamespace:Qt,staticKeys:function(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}(gu)},_u=y(Ao),ku=/^\s*([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,xu=/^\s*[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?']|\[".*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*\s*$/,Cu={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Au=function(e){return"if("+e+")return null;"},$u={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Au("$event.target !== $event.currentTarget"),ctrl:Au("!$event.ctrlKey"),shift:Au("!$event.shiftKey"),alt:Au("!$event.altKey"),meta:Au("!$event.metaKey"),left:Au("'button' in $event && $event.button !== 0"),middle:Au("'button' in $event && $event.button !== 1"),right:Au("'button' in $event && $event.button !== 2")},Su={on:Bo,bind:Mo,cloak:k},Ou=function(e){this.options=e,this.warn=e.warn||Tn,this.transforms=En(e.modules,"transformCode"),this.dataGenFns=En(e.modules,"genData"),this.directives=w(w({},Su),e.directives);var t=e.isReservedTag||Ai;this.maybeComponent=function(e){return!t(e.tag)},this.onceId=0,this.staticRenderFns=[]},Tu=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),Eu=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),Nu=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g,Pu=function(e){return function(t){function n(n,r){var o=Object.create(t),i=[],s=[];if(o.warn=function(e,t){(t?s:i).push(e)},r){r.modules&&(o.modules=(t.modules||[]).concat(r.modules)),r.directives&&(o.directives=w(Object.create(t.directives||null),r.directives));for(var a in r)"modules"!==a&&"directives"!==a&&(o[a]=r[a])}var c=e(n,o);return i.push.apply(i,ii(c.ast)),c.errors=i,c.tips=s,c}return{compile:n,compileToFunctions:fi(n)}}}(function(e,t){var n=Yr(e.trim(),t);!1!==t.optimize&&Co(n,t);var r=Lo(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}}),ju=Pu(wu),Bu=ju.compileToFunctions,Mu=!!ji&&di(!1),Lu=!!ji&&di(!0),Iu=y(function(e){var t=tn(e);return t&&t.innerHTML}),Du=Mt.prototype.$mount;Mt.prototype.$mount=function(e,t){if((e=e&&tn(e))===document.body||e===document.documentElement)return Gi("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&((r=Iu(r))||Gi("Template element not found or is empty: "+n.template,this));else{if(!r.nodeType)return Gi("invalid template option:"+r,this),this;r=r.innerHTML}else e&&(r=hi(e));if(r){Ei.performance&&Ss&&Ss("compile");var o=Bu(r,{shouldDecodeNewlines:Mu,shouldDecodeNewlinesForHref:Lu,delimiters:n.delimiters,comments:n.comments},this),i=o.render,s=o.staticRenderFns;n.render=i,n.staticRenderFns=s,Ei.performance&&Ss&&(Ss("compile end"),Os("vue "+this._name+" compile","compile","compile end"))}}return Du.call(this,e,t)},Mt.compile=Bu,e.exports=Mt}),o=e(r),i={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return e.loggedIn?n("div",{attrs:{id:"ChatBox"}},[n("div",[n("div",{staticClass:"ChatBox-List"},e._l(e.messages,function(t){return n("div",[n("p",{class:[t.currentUser?"Message-User":"Message-Guest"]},[e._v(" "+e._s(t.message))])])})),e._v(" "),n("div",[n("form",{attrs:{action:"/",method:"post"},on:{submit:function(t){t.preventDefault(),e.sendMessage(t)}}},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.newMessage,expression:"newMessage"}],attrs:{type:"text",placeholder:"Enter your message here"},domProps:{value:e.newMessage},on:{input:function(t){t.target.composing||(e.newMessage=t.target.value)}}}),e._v(" "),n("input",{attrs:{type:"submit",value:"Submit"}})])])])]):n("div",[n("form",{attrs:{action:"/"},on:{submit:function(t){t.preventDefault(),e.login(t)}}},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.username,expression:"username"}],attrs:{type:"text",placeholder:"Enter your username..."},domProps:{value:e.username},on:{input:function(t){t.target.composing||(e.username=t.target.value)}}})])])},staticRenderFns:[],data:function(){return{newMessage:"",messages:[],username:this.nickname,myTextString:"You said",loggedIn:!1}},props:{socket:{},nickname:{type:String,default:""}},watch:{nickname:function(e,t){this.username=e}},created:function(){var e=this;this.socket.on("message",function(t){e.loggedIn&&(e.handleMessage(t),e.$emit("message"))})},methods:{sendMessage:function(){this.socket.emit("message",{message:this.newMessage,user:this.username}),this.newMessage=""},handleMessage:function(e){var t=e.message.substring(0,8)===this.myTextString;e.currentUser=t,t||(e.message+=", user: "+e.user),this.messages.push(e)},login:function(){this.loggedIn=!0,this.socket.emit("userLoggedIn",this.username),this.$emit("name-change",this.username)}}},s={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"chat"}},[e.loggedIn?n("chat-box",{attrs:{socket:e.socket,nickname:e.nick},on:{message:e.message,"name-change":e.nameChange}}):e._e()],1)},staticRenderFns:[],data:function(){return{socket:null,loggedIn:!1,username:""}},components:{ChatBox:i},sockets:{connect:function(){this.socket=this.$socket,this.loggedIn=!0,console.log("socket connected")}},methods:{message:function(){this.$emit("message")},nameChange:function(e){this.$emit("nameChange",e)}},props:{nick:{type:String,default:""}}},a={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"photos"}},[n("div",{},[n("a",{staticClass:"Slider-navigation-button Slider-navigation-prev",class:{"Slider-navigation--disabled":!e.canPrev()},domProps:{innerHTML:e._s(e.prevLabel)},on:{click:function(t){t.preventDefault(),e.prevSelect()}}}),e._v(" "),n("img",{style:{width:e.sliderWidth+"px",height:e.sliderHeight+"px"},attrs:{src:e.imageLink}}),e._v(" "),n("a",{staticClass:"Slider-navigation-button Slider-navigation-next",class:{"Slider-navigation--disabled":!e.canNext()},domProps:{innerHTML:e._s(e.nextLabel)},on:{click:function(t){t.preventDefault(),e.nextSelect()}}})])])},staticRenderFns:[],data:function(){return{currentPage:0,photoList:[],imageLink:this.photos[0],sliderWidth:this.photoWidth,sliderHeight:this.photoHeight,dragOffset:0,dragStartX:0,mousedown:!1,minSwipeDistance:8}},props:{photos:{type:Array,default:[]},easing:{type:String,default:"str"},nextLabel:{type:String,default:"▶"},prevLabel:{type:String,default:"◀"},pwidth:{type:Number,default:400},pheight:{type:Number,default:200}},watch:{pwidth:{immediate:!0,handler:function(e,t){this.sliderWidth=e}},pheight:{immediate:!0,handler:function(e,t){this.sliderHeight=e}}},methods:{canPrev:function(){return this.currentPage>0},canNext:function(){return this.currentPage<this.imageCount()-1},imageCount:function(){return this.photos.length},nextSelect:function(){this.canNext()&&(this.currentPage+=1,this.imageLink=this.photos[this.currentPage])},prevSelect:function(){this.canPrev()&&(this.currentPage-=1,this.imageLink=this.photos[this.currentPage])},handleMousedown:function(e){e.touches||e.preventDefault(),this.mousedown=!0,this.dragStartX="ontouchstart"in window?e.touches[0].clientX:e.clientX},handleMouseup:function(){this.mousedown=!1,this.dragOffset=0},handleMousemove:function(e){if(this.mousedown){var t="ontouchstart"in window?e.touches[0].clientX:e.clientX,n=this.dragStartX-t;this.dragOffset=n,this.dragOffset>this.minSwipeDistance?(this.handleMouseup(),this.prevSelect()):this.dragOffset<-this.minSwipeDistance&&(this.handleMouseup(),this.nextSelect())}}},mounted:function(){"ontouchstart"in window?(this.$el.addEventListener("touchstart",this.handleMousedown),this.$el.addEventListener("touchend",this.handleMouseup),this.$el.addEventListener("touchmove",this.handleMousemove)):(this.$el.addEventListener("mousedown",this.handleMousedown),this.$el.addEventListener("mouseup",this.handleMouseup),this.$el.addEventListener("mousemove",this.handleMousemove))}},c={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"Photos"}},[n("slider",{attrs:{photos:e.photoList,pwidth:e.swidth,pheight:e.sheight}})],1)},staticRenderFns:[],components:{Slider:a},data:function(){return{photoList:["http://lorempixel.com/400/200","http://lorempixel.com/g/400/200/","http://lorempixel.com/400/200/sports/","http://lorempixel.com/400/200/sports/Dummy-Text/","http://lorempixel.com/400/200/sports/1/Dummy-Text/"]}},props:{swidth:{type:Number,default:400},sheight:{type:Number,default:200}}},u={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"settings"},[n("div",{staticClass:"container vue"},[n("a",{staticClass:"settings",on:{click:function(t){t.preventDefault(),e.photoOpen=!e.photoOpen}}},[e._v("Photo settings")]),e._v(" "),n("div",{directives:[{name:"show",rawName:"v-show",value:e.photoOpen,expression:"photoOpen"}]},[n("p",[e._v("Width:"+e._s(e.photoWidth))]),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.photoWidth,expression:"photoWidth"}],attrs:{type:"range",min:"1",max:"1000"},domProps:{value:e.photoWidth},on:{change:e.widthChange,__r:function(t){e.photoWidth=t.target.value}}}),e._v(" "),n("p",[e._v("Height:"+e._s(e.photoHeight))]),e._v(" "),n("input",{directives:[{name:"model",rawName:"v-model",value:e.photoHeight,expression:"photoHeight"}],attrs:{type:"range",min:"1",max:"1000"},domProps:{value:e.photoHeight},on:{change:e.heightChange,__r:function(t){e.photoHeight=t.target.value}}})]),e._v(" "),n("a",{staticClass:"settings",on:{click:function(t){t.preventDefault(),e.chatOpen=!e.chatOpen}}},[e._v("Chat settings")]),e._v(" "),n("form",{directives:[{name:"show",rawName:"v-show",value:e.chatOpen,expression:"chatOpen"}],on:{submit:function(t){t.preventDefault(),e.editName(t)}}},[n("input",{directives:[{name:"model",rawName:"v-model",value:e.nickName,expression:"nickName"}],staticClass:"nickname",attrs:{type:"text",placeholder:"Edit nickname",action:"/",method:"post"},domProps:{value:e.nickName},on:{input:function(t){t.target.composing||(e.nickName=t.target.value)}}}),e._v(" "),n("input",{attrs:{type:"submit",value:"Submit"}})])])])},staticRenderFns:[],data:function(){return{pageCount:0,photoOpen:!1,chatOpen:!1,photoWidth:this.swidth,photoHeight:this.sheight,nickName:this.nick}},methods:{editName:function(e){this.$emit("name-change",this.nickName)},widthChange:function(e){this.$emit("width-change",e.target.valueAsNumber)},heightChange:function(e){this.$emit("height-change",e.target.valueAsNumber)}},props:{swidth:{type:Number,default:400},sheight:{type:Number,default:200},nick:{type:String,default:""}},watch:{nick:function(e,t){this.nickname=e}}},l={render:function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{attrs:{id:"PageChat"}},[e._l(e.pageList,function(t){return n("button",{class:["chat"===t.id&&e.isBlinking?"blink":""],on:{click:function(n){e.componentChange(t.id)}}},[e._v(" "+e._s(t.text))])}),e._v(" "),n("keep-alive",[n(e.dynamicComponent,{tag:"component",attrs:{id:"comp",sheight:e.photoHeight,swidth:e.photoWidth,nick:e.username},on:{message:e.message,"width-change":e.widthChange,"height-change":e.heightChange,"name-change":e.nameChange}})],1)],2)},staticRenderFns:[],data:function(){return{dynamicComponent:"chat",pageList:[{id:"chat",text:"Chat"},{id:"photos",text:"Photos"},{id:"settings",text:"Settings"}],isBlinking:!1,photoWidth:400,photoHeight:200,username:""}},components:{Chat:s,Photos:c,Settings:u},methods:{componentChange:function(e){this.dynamicComponent=e,this.blinkHandler(!1)},widthChange:function(e){this.photoWidth=e},heightChange:function(e){this.photoHeight=e},nameChange:function(e){this.username=e},message:function(){this.blinkHandler(!0)},blinkHandler:function(e){e&&"chat"!=this.dynamicComponent&&!this.isBlinking?this.isBlinking=!0:!e&&this.isBlinking&&"chat"===this.dynamicComponent&&(this.isBlinking=!1)}}},p=t(function(e,t){!function(t,n){e.exports=function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=46)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(r){function o(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||"undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function i(e){var n=this.useColors;if(e[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+e[0]+(n?"%c ":" ")+"+"+t.humanize(this.diff),n){var r="color: "+this.color;e.splice(1,0,r,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&(o++,"%c"===e&&(i=o))}),e.splice(i,0,r)}}function s(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function a(e){try{null==e?t.storage.removeItem("debug"):t.storage.debug=e}catch(e){}}function c(){var e;try{e=t.storage.debug}catch(e){}return!e&&void 0!==r&&"env"in r&&(e=r.env.DEBUG),e}t=e.exports=n(29),t.log=s,t.formatArgs=i,t.save=a,t.load=c,t.useColors=o,t.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),t.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],t.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},t.enable(c())}).call(t,n(39))},function(e,t,n){function r(e){if(e)return o(e)}function o(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}e.exports=r,r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n=this._callbacks["$"+e];if(!n)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var r,o=0;o<n.length;o++)if((r=n[o])===t||r.fn===t){n.splice(o,1);break}return this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};var t=[].slice.call(arguments,1),n=this._callbacks["$"+e];if(n){n=n.slice(0);for(var r=0,o=n.length;r<o;++r)n[r].apply(this,t)}return this},r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}},function(e,t,n){(function(e){function r(e,n){return n("b"+t.packets[e.type]+e.data.data)}function o(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=e.data,i=new Uint8Array(o),s=new Uint8Array(1+o.byteLength);s[0]=g[e.type];for(var a=0;a<i.length;a++)s[a+1]=i[a];return r(s.buffer)}function i(e,n,r){if(!n)return t.encodeBase64Packet(e,r);var o=new FileReader;return o.onload=function(){e.data=o.result,t.encodePacket(e,n,!0,r)},o.readAsArrayBuffer(e.data)}function s(e,n,r){if(!n)return t.encodeBase64Packet(e,r);if(y)return i(e,n,r);var o=new Uint8Array(1);return o[0]=g[e.type],r(new _([o.buffer,e.data]))}function a(e){try{e=h.decode(e,{strict:!1})}catch(e){return!1}return e}function c(e,t,n){for(var r=new Array(e.length),o=d(e.length,n),i=0;i<e.length;i++)!function(e,n,o){t(n,function(t,n){r[e]=n,o(t,r)})}(i,e[i],o)}var u,l=n(35),p=n(13),f=n(24),d=n(23),h=n(36);e&&e.ArrayBuffer&&(u=n(27));var v="undefined"!=typeof navigator&&/Android/i.test(navigator.userAgent),m="undefined"!=typeof navigator&&/PhantomJS/i.test(navigator.userAgent),y=v||m;t.protocol=3;var g=t.packets={open:0,close:1,ping:2,pong:3,message:4,upgrade:5,noop:6},b=l(g),w={type:"error",data:"parser error"},_=n(28);t.encodePacket=function(t,n,i,a){"function"==typeof n&&(a=n,n=!1),"function"==typeof i&&(a=i,i=null);var c=void 0===t.data?void 0:t.data.buffer||t.data;if(e.ArrayBuffer&&c instanceof ArrayBuffer)return o(t,n,a);if(_&&c instanceof e.Blob)return s(t,n,a);if(c&&c.base64)return r(t,a);var u=g[t.type];return void 0!==t.data&&(u+=i?h.encode(String(t.data),{strict:!1}):String(t.data)),a(""+u)},t.encodeBase64Packet=function(n,r){var o="b"+t.packets[n.type];if(_&&n.data instanceof e.Blob){var i=new FileReader;return i.onload=function(){var e=i.result.split(",")[1];r(o+e)},i.readAsDataURL(n.data)}var s;try{s=String.fromCharCode.apply(null,new Uint8Array(n.data))}catch(e){for(var a=new Uint8Array(n.data),c=new Array(a.length),u=0;u<a.length;u++)c[u]=a[u];s=String.fromCharCode.apply(null,c)}return o+=e.btoa(s),r(o)},t.decodePacket=function(e,n,r){if(void 0===e)return w;if("string"==typeof e){if("b"===e.charAt(0))return t.decodeBase64Packet(e.substr(1),n);if(r&&!1===(e=a(e)))return w;var o=e.charAt(0);return Number(o)==o&&b[o]?e.length>1?{type:b[o],data:e.substring(1)}:{type:b[o]}:w}var i=new Uint8Array(e),o=i[0],s=f(e,1);return _&&"blob"===n&&(s=new _([s])),{type:b[o],data:s}},t.decodeBase64Packet=function(e,t){var n=b[e.charAt(0)];if(!u)return{type:n,data:{base64:!0,data:e.substr(1)}};var r=u.decode(e.substr(1));return"blob"===t&&_&&(r=new _([r])),{type:n,data:r}},t.encodePayload=function(e,n,r){function o(e){return e.length+":"+e}function i(e,r){t.encodePacket(e,!!s&&n,!1,function(e){r(null,o(e))})}"function"==typeof n&&(r=n,n=null);var s=p(e);return n&&s?_&&!y?t.encodePayloadAsBlob(e,r):t.encodePayloadAsArrayBuffer(e,r):e.length?void c(e,i,function(e,t){return r(t.join(""))}):r("0:")},t.decodePayload=function(e,n,r){if("string"!=typeof e)return t.decodePayloadAsBinary(e,n,r);"function"==typeof n&&(r=n,n=null);var o;if(""===e)return r(w,0,1);for(var i,s,a="",c=0,u=e.length;c<u;c++){var l=e.charAt(c);if(":"===l){if(""===a||a!=(i=Number(a)))return r(w,0,1);if(s=e.substr(c+1,i),a!=s.length)return r(w,0,1);if(s.length){if(o=t.decodePacket(s,n,!1),w.type===o.type&&w.data===o.data)return r(w,0,1);if(!1===r(o,c+i,u))return}c+=i,a=""}else a+=l}return""!==a?r(w,0,1):void 0},t.encodePayloadAsArrayBuffer=function(e,n){function r(e,n){t.encodePacket(e,!0,!0,function(e){return n(null,e)})}if(!e.length)return n(new ArrayBuffer(0));c(e,r,function(e,t){var r=t.reduce(function(e,t){var n;return n="string"==typeof t?t.length:t.byteLength,e+n.toString().length+n+2},0),o=new Uint8Array(r),i=0;return t.forEach(function(e){var t="string"==typeof e,n=e;if(t){for(var r=new Uint8Array(e.length),s=0;s<e.length;s++)r[s]=e.charCodeAt(s);n=r.buffer}o[i++]=t?0:1;for(var a=n.byteLength.toString(),s=0;s<a.length;s++)o[i++]=parseInt(a[s]);o[i++]=255;for(var r=new Uint8Array(n),s=0;s<r.length;s++)o[i++]=r[s]}),n(o.buffer)})},t.encodePayloadAsBlob=function(e,n){function r(e,n){t.encodePacket(e,!0,!0,function(e){var t=new Uint8Array(1);if(t[0]=1,"string"==typeof e){for(var r=new Uint8Array(e.length),o=0;o<e.length;o++)r[o]=e.charCodeAt(o);e=r.buffer,t[0]=0}for(var i=e instanceof ArrayBuffer?e.byteLength:e.size,s=i.toString(),a=new Uint8Array(s.length+1),o=0;o<s.length;o++)a[o]=parseInt(s[o]);if(a[s.length]=255,_){var c=new _([t.buffer,a.buffer,e]);n(null,c)}})}c(e,r,function(e,t){return n(new _(t))})},t.decodePayloadAsBinary=function(e,n,r){"function"==typeof n&&(r=n,n=null);for(var o=e,i=[];o.byteLength>0;){for(var s=new Uint8Array(o),a=0===s[0],c="",u=1;255!==s[u];u++){if(c.length>310)return r(w,0,1);c+=s[u]}o=f(o,2+c.length),c=parseInt(c);var l=f(o,0,c);if(a)try{l=String.fromCharCode.apply(null,new Uint8Array(l))}catch(e){var p=new Uint8Array(l);l="";for(var u=0;u<p.length;u++)l+=String.fromCharCode(p[u])}i.push(l),o=f(o,c)}var d=i.length;i.forEach(function(e,o){r(t.decodePacket(e,n,!0),o,d)})}}).call(t,n(0))},function(e,t){e.exports=function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t){t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},function(e,t,n){function r(e){this.path=e.path,this.hostname=e.hostname,this.port=e.port,this.secure=e.secure,this.query=e.query,this.timestampParam=e.timestampParam,this.timestampRequests=e.timestampRequests,this.readyState="",this.agent=e.agent||!1,this.socket=e.socket,this.enablesXDR=e.enablesXDR,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.forceNode=e.forceNode,this.extraHeaders=e.extraHeaders,this.localAddress=e.localAddress}var o=n(3),i=n(2);e.exports=r,i(r.prototype),r.prototype.onError=function(e,t){var n=new Error(e);return n.type="TransportError",n.description=t,this.emit("error",n),this},r.prototype.open=function(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this},r.prototype.close=function(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this},r.prototype.send=function(e){if("open"!==this.readyState)throw new Error("Transport not open");this.write(e)},r.prototype.onOpen=function(){this.readyState="open",this.writable=!0,this.emit("open")},r.prototype.onData=function(e){var t=o.decodePacket(e,this.socket.binaryType);this.onPacket(t)},r.prototype.onPacket=function(e){this.emit("packet",e)},r.prototype.onClose=function(){this.readyState="closed",this.emit("close")}},function(e,t,n){(function(t){var r=n(37);e.exports=function(e){var n=e.xdomain,o=e.xscheme,i=e.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!n||r))return new XMLHttpRequest}catch(e){}try{if("undefined"!=typeof XDomainRequest&&!o&&i)return new XDomainRequest}catch(e){}if(!n)try{return new(t[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}}).call(t,n(0))},function(e,t,n){function r(){}function o(e){var n=""+e.type;return t.BINARY_EVENT!==e.type&&t.BINARY_ACK!==e.type||(n+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(n+=e.nsp+","),null!=e.id&&(n+=e.id),null!=e.data&&(n+=JSON.stringify(e.data)),p("encoded %j as %s",e,n),n}function i(e,t){function n(e){var n=h.deconstructPacket(e),r=o(n.packet),i=n.buffers;i.unshift(r),t(i)}h.removeBlobs(e,n)}function s(){this.reconstructor=null}function a(e){var n=0,r={type:Number(e.charAt(0))};if(null==t.types[r.type])return l();if(t.BINARY_EVENT===r.type||t.BINARY_ACK===r.type){for(var o="";"-"!==e.charAt(++n)&&(o+=e.charAt(n),n!=e.length););if(o!=Number(o)||"-"!==e.charAt(n))throw new Error("Illegal attachments");r.attachments=Number(o)}if("/"===e.charAt(n+1))for(r.nsp="";++n;){var i=e.charAt(n);if(","===i)break;if(r.nsp+=i,n===e.length)break}else r.nsp="/";var s=e.charAt(n+1);if(""!==s&&Number(s)==s){for(r.id="";++n;){var i=e.charAt(n);if(null==i||Number(i)!=i){--n;break}if(r.id+=e.charAt(n),n===e.length)break}r.id=Number(r.id)}return e.charAt(++n)&&(r=c(r,e.substr(n))),p("decoded %s as %j",e,r),r}function c(e,t){try{e.data=JSON.parse(t)}catch(e){return l()}return e}function u(e){this.reconPack=e,this.buffers=[]}function l(){return{type:t.ERROR,data:"parser error"}}var p=n(1)("socket.io-parser"),f=n(2),d=n(13),h=n(42),v=n(20);t.protocol=4,t.types=["CONNECT","DISCONNECT","EVENT","ACK","ERROR","BINARY_EVENT","BINARY_ACK"],t.CONNECT=0,t.DISCONNECT=1,t.EVENT=2,t.ACK=3,t.ERROR=4,t.BINARY_EVENT=5,t.BINARY_ACK=6,t.Encoder=r,t.Decoder=s,r.prototype.encode=function(e,n){e.type!==t.EVENT&&e.type!==t.ACK||!d(e.data)||(e.type=e.type===t.EVENT?t.BINARY_EVENT:t.BINARY_ACK),p("encoding packet %j",e),t.BINARY_EVENT===e.type||t.BINARY_ACK===e.type?i(e,n):n([o(e)])},f(s.prototype),s.prototype.add=function(e){var n;if("string"==typeof e)n=a(e),t.BINARY_EVENT===n.type||t.BINARY_ACK===n.type?(this.reconstructor=new u(n),0===this.reconstructor.reconPack.attachments&&this.emit("decoded",n)):this.emit("decoded",n);else{if(!v(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(n=this.reconstructor.takeBinaryData(e))&&(this.reconstructor=null,this.emit("decoded",n))}},s.prototype.destroy=function(){
this.reconstructor&&this.reconstructor.finishedReconstruction()},u.prototype.takeBinaryData=function(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){var t=h.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null},u.prototype.finishedReconstruction=function(){this.reconPack=null,this.buffers=[]}},function(e,t,n){function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.default=new(function(){function e(){r(this,e),this.listeners=new Map}return o(e,[{key:"addListener",value:function(e,t,n){return"function"==typeof t&&(this.listeners.has(e)||this.listeners.set(e,[]),this.listeners.get(e).push({callback:t,vm:n}),!0)}},{key:"removeListener",value:function(e,t,n){var r=this.listeners.get(e),o=void 0;return!!(r&&r.length&&(o=r.reduce(function(e,r,o){return"function"==typeof r.callback&&r.callback===t&&r.vm==n?e=o:e},-1))>-1)&&(r.splice(o,1),this.listeners.set(e,r),!0)}},{key:"emit",value:function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var o=this.listeners.get(e);return!(!o||!o.length||(o.forEach(function(e){var t;(t=e.callback).call.apply(t,[e.vm].concat(n))}),0))}}]),e}())},function(e,t){var n=[].slice;e.exports=function(e,t){if("string"==typeof t&&(t=e[t]),"function"!=typeof t)throw new Error("bind() requires a function");var r=n.call(arguments,2);return function(){return t.apply(e,r.concat(n.call(arguments)))}}},function(e,t,n){(function(e){function r(t){var n=!1,r=!1,a=!1!==t.jsonp;if(e.location){var c="https:"===location.protocol,u=location.port;u||(u=c?443:80),n=t.hostname!==location.hostname||u!==t.port,r=t.secure!==c}if(t.xdomain=n,t.xscheme=r,"open"in new o(t)&&!t.forceJSONP)return new i(t);if(!a)throw new Error("JSONP disabled");return new s(t)}var o=n(7),i=n(33),s=n(32),a=n(34);t.polling=r,t.websocket=a}).call(t,n(0))},function(e,t,n){function r(e){var t=e&&e.forceBase64;l&&!t||(this.supportsBinary=!1),o.call(this,e)}var o=n(6),i=n(5),s=n(3),a=n(4),c=n(21),u=n(1)("engine.io-client:polling");e.exports=r;var l=function(){return null!=new(n(7))({xdomain:!1}).responseType}();a(r,o),r.prototype.name="polling",r.prototype.doOpen=function(){this.poll()},r.prototype.pause=function(e){function t(){u("paused"),n.readyState="paused",e()}var n=this;if(this.readyState="pausing",this.polling||!this.writable){var r=0;this.polling&&(u("we are currently polling - waiting to pause"),r++,this.once("pollComplete",function(){u("pre-pause polling complete"),--r||t()})),this.writable||(u("we are currently writing - waiting to pause"),r++,this.once("drain",function(){u("pre-pause writing complete"),--r||t()}))}else t()},r.prototype.poll=function(){u("polling"),this.polling=!0,this.doPoll(),this.emit("poll")},r.prototype.onData=function(e){var t=this;u("polling got data %s",e);var n=function(e,n,r){if("opening"===t.readyState&&t.onOpen(),"close"===e.type)return t.onClose(),!1;t.onPacket(e)};s.decodePayload(e,this.socket.binaryType,n),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():u('ignoring poll - transport state "%s"',this.readyState))},r.prototype.doClose=function(){function e(){u("writing close packet"),t.write([{type:"close"}])}var t=this;"open"===this.readyState?(u("transport open - closing"),e()):(u("transport not open - deferring close"),this.once("open",e))},r.prototype.write=function(e){var t=this;this.writable=!1;var n=function(){t.writable=!0,t.emit("drain")};s.encodePayload(e,this.supportsBinary,function(e){t.doWrite(e,n)})},r.prototype.uri=function(){var e=this.query||{},t=this.secure?"https":"http",n="";return!1!==this.timestampRequests&&(e[this.timestampParam]=c()),this.supportsBinary||e.sid||(e.b64=1),e=i.encode(e),this.port&&("https"===t&&443!==Number(this.port)||"http"===t&&80!==Number(this.port))&&(n=":"+this.port),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e}},function(e,t,n){(function(t){function r(e){if(!e||"object"!=typeof e)return!1;if(o(e)){for(var n=0,i=e.length;n<i;n++)if(r(e[n]))return!0;return!1}if("function"==typeof t.Buffer&&t.Buffer.isBuffer&&t.Buffer.isBuffer(e)||"function"==typeof t.ArrayBuffer&&e instanceof ArrayBuffer||s&&e instanceof Blob||a&&e instanceof File)return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return r(e.toJSON(),!0);for(var c in e)if(Object.prototype.hasOwnProperty.call(e,c)&&r(e[c]))return!0;return!1}var o=n(15),i=Object.prototype.toString,s="function"==typeof t.Blob||"[object BlobConstructor]"===i.call(t.Blob),a="function"==typeof t.File||"[object FileConstructor]"===i.call(t.File);e.exports=r}).call(t,n(0))},function(e,t){var n=[].indexOf;e.exports=function(e,t){if(n)return e.indexOf(t);for(var r=0;r<e.length;++r)if(e[r]===t)return r;return-1}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){var n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));for(var s=n.exec(e||""),a={},c=14;c--;)a[r[c]]=s[c]||"";return-1!=o&&-1!=i&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a}},function(e,t,n){function r(e,t){if(!(this instanceof r))return new r(e,t);e&&"object"==typeof e&&(t=e,e=void 0),t=t||{},t.path=t.path||"/socket.io",this.nsps={},this.subs=[],this.opts=t,this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(t.randomizationFactor||.5),this.backoff=new f({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this.readyState="closed",this.uri=e,this.connecting=[],this.lastPing=null,this.encoding=!1,this.packetBuffer=[];var n=t.parser||a;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this.autoConnect=!1!==t.autoConnect,this.autoConnect&&this.open()}var o=n(30),i=n(19),s=n(2),a=n(8),c=n(18),u=n(10),l=n(1)("socket.io-client:manager"),p=n(14),f=n(26),d=Object.prototype.hasOwnProperty;e.exports=r,r.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var e in this.nsps)d.call(this.nsps,e)&&this.nsps[e].emit.apply(this.nsps[e],arguments)},r.prototype.updateSocketIds=function(){for(var e in this.nsps)d.call(this.nsps,e)&&(this.nsps[e].id=this.generateId(e))},r.prototype.generateId=function(e){return("/"===e?"":e+"#")+this.engine.id},s(r.prototype),r.prototype.reconnection=function(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection},r.prototype.reconnectionAttempts=function(e){return arguments.length?(this._reconnectionAttempts=e,this):this._reconnectionAttempts},r.prototype.reconnectionDelay=function(e){return arguments.length?(this._reconnectionDelay=e,this.backoff&&this.backoff.setMin(e),this):this._reconnectionDelay},r.prototype.randomizationFactor=function(e){return arguments.length?(this._randomizationFactor=e,this.backoff&&this.backoff.setJitter(e),this):this._randomizationFactor},r.prototype.reconnectionDelayMax=function(e){return arguments.length?(this._reconnectionDelayMax=e,this.backoff&&this.backoff.setMax(e),this):this._reconnectionDelayMax},r.prototype.timeout=function(e){return arguments.length?(this._timeout=e,this):this._timeout},r.prototype.maybeReconnectOnOpen=function(){!this.reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()},r.prototype.open=r.prototype.connect=function(e,t){if(l("readyState %s",this.readyState),~this.readyState.indexOf("open"))return this;l("opening %s",this.uri),this.engine=o(this.uri,this.opts);var n=this.engine,r=this;this.readyState="opening",this.skipReconnect=!1;var i=c(n,"open",function(){r.onopen(),e&&e()}),s=c(n,"error",function(t){if(l("connect_error"),r.cleanup(),r.readyState="closed",r.emitAll("connect_error",t),e){var n=new Error("Connection error");n.data=t,e(n)}else r.maybeReconnectOnOpen()});if(!1!==this._timeout){var a=this._timeout;l("connect attempt will timeout after %d",a);var u=setTimeout(function(){l("connect attempt timed out after %d",a),i.destroy(),n.close(),n.emit("error","timeout"),r.emitAll("connect_timeout",a)},a);this.subs.push({destroy:function(){clearTimeout(u)}})}return this.subs.push(i),this.subs.push(s),this},r.prototype.onopen=function(){l("open"),this.cleanup(),this.readyState="open",this.emit("open");var e=this.engine;this.subs.push(c(e,"data",u(this,"ondata"))),this.subs.push(c(e,"ping",u(this,"onping"))),this.subs.push(c(e,"pong",u(this,"onpong"))),this.subs.push(c(e,"error",u(this,"onerror"))),this.subs.push(c(e,"close",u(this,"onclose"))),this.subs.push(c(this.decoder,"decoded",u(this,"ondecoded")))},r.prototype.onping=function(){this.lastPing=new Date,this.emitAll("ping")},r.prototype.onpong=function(){this.emitAll("pong",new Date-this.lastPing)},r.prototype.ondata=function(e){this.decoder.add(e)},r.prototype.ondecoded=function(e){this.emit("packet",e)},r.prototype.onerror=function(e){l("error",e),this.emitAll("error",e)},r.prototype.socket=function(e,t){function n(){~p(o.connecting,r)||o.connecting.push(r)}var r=this.nsps[e];if(!r){r=new i(this,e,t),this.nsps[e]=r;var o=this;r.on("connecting",n),r.on("connect",function(){r.id=o.generateId(e)}),this.autoConnect&&n()}return r},r.prototype.destroy=function(e){var t=p(this.connecting,e);~t&&this.connecting.splice(t,1),this.connecting.length||this.close()},r.prototype.packet=function(e){l("writing packet %j",e);var t=this;e.query&&0===e.type&&(e.nsp+="?"+e.query),t.encoding?t.packetBuffer.push(e):(t.encoding=!0,this.encoder.encode(e,function(n){for(var r=0;r<n.length;r++)t.engine.write(n[r],e.options);t.encoding=!1,t.processPacketQueue()}))},r.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var e=this.packetBuffer.shift();this.packet(e)}},r.prototype.cleanup=function(){l("cleanup");for(var e=this.subs.length,t=0;t<e;t++)this.subs.shift().destroy();this.packetBuffer=[],this.encoding=!1,this.lastPing=null,this.decoder.destroy()},r.prototype.close=r.prototype.disconnect=function(){l("disconnect"),this.skipReconnect=!0,this.reconnecting=!1,"opening"===this.readyState&&this.cleanup(),this.backoff.reset(),this.readyState="closed",this.engine&&this.engine.close()},r.prototype.onclose=function(e){l("onclose"),this.cleanup(),this.backoff.reset(),this.readyState="closed",this.emit("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()},r.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var e=this;if(this.backoff.attempts>=this._reconnectionAttempts)l("reconnect failed"),this.backoff.reset(),this.emitAll("reconnect_failed"),this.reconnecting=!1;else{var t=this.backoff.duration();l("will wait %dms before reconnect attempt",t),this.reconnecting=!0;var n=setTimeout(function(){e.skipReconnect||(l("attempting reconnect"),e.emitAll("reconnect_attempt",e.backoff.attempts),e.emitAll("reconnecting",e.backoff.attempts),e.skipReconnect||e.open(function(t){t?(l("reconnect attempt error"),e.reconnecting=!1,e.reconnect(),e.emitAll("reconnect_error",t.data)):(l("reconnect success"),e.onreconnect())}))},t);this.subs.push({destroy:function(){clearTimeout(n)}})}},r.prototype.onreconnect=function(){var e=this.backoff.attempts;this.reconnecting=!1,this.backoff.reset(),this.updateSocketIds(),this.emitAll("reconnect",e)}},function(e,t){function n(e,t,n){return e.on(t,n),{destroy:function(){e.removeListener(t,n)}}}e.exports=n},function(e,t,n){function r(e,t,n){this.io=e,this.nsp=t,this.json=this,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,n&&n.query&&(this.query=n.query),this.io.autoConnect&&this.open()}var o=n(8),i=n(2),s=n(43),a=n(18),c=n(10),u=n(1)("socket.io-client:socket"),l=n(5);e.exports=r;var p={connect:1,connect_error:1,connect_timeout:1,connecting:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1,ping:1,pong:1},f=i.prototype.emit;i(r.prototype),r.prototype.subEvents=function(){if(!this.subs){var e=this.io;this.subs=[a(e,"open",c(this,"onopen")),a(e,"packet",c(this,"onpacket")),a(e,"close",c(this,"onclose"))]}},r.prototype.open=r.prototype.connect=function(){return this.connected?this:(this.subEvents(),this.io.open(),"open"===this.io.readyState&&this.onopen(),this.emit("connecting"),this)},r.prototype.send=function(){var e=s(arguments);return e.unshift("message"),this.emit.apply(this,e),this},r.prototype.emit=function(e){if(p.hasOwnProperty(e))return f.apply(this,arguments),this;var t=s(arguments),n={type:o.EVENT,data:t};return n.options={},n.options.compress=!this.flags||!1!==this.flags.compress,"function"==typeof t[t.length-1]&&(u("emitting packet with ack id %d",this.ids),this.acks[this.ids]=t.pop(),n.id=this.ids++),this.connected?this.packet(n):this.sendBuffer.push(n),delete this.flags,this},r.prototype.packet=function(e){e.nsp=this.nsp,this.io.packet(e)},r.prototype.onopen=function(){if(u("transport is open - connecting"),"/"!==this.nsp)if(this.query){var e="object"==typeof this.query?l.encode(this.query):this.query;u("sending connect packet with query %s",e),this.packet({type:o.CONNECT,query:e})}else this.packet({type:o.CONNECT})},r.prototype.onclose=function(e){u("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emit("disconnect",e)},r.prototype.onpacket=function(e){if(e.nsp===this.nsp)switch(e.type){case o.CONNECT:this.onconnect();break;case o.EVENT:case o.BINARY_EVENT:this.onevent(e);break;case o.ACK:case o.BINARY_ACK:this.onack(e);break;case o.DISCONNECT:this.ondisconnect();break;case o.ERROR:this.emit("error",e.data)}},r.prototype.onevent=function(e){var t=e.data||[];u("emitting event %j",t),null!=e.id&&(u("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?f.apply(this,t):this.receiveBuffer.push(t)},r.prototype.ack=function(e){var t=this,n=!1;return function(){if(!n){n=!0;var r=s(arguments);u("sending ack %j",r),t.packet({type:o.ACK,id:e,data:r})}}},r.prototype.onack=function(e){var t=this.acks[e.id];"function"==typeof t?(u("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):u("bad ack %s",e.id)},r.prototype.onconnect=function(){this.connected=!0,this.disconnected=!1,this.emit("connect"),this.emitBuffered()},r.prototype.emitBuffered=function(){var e;for(e=0;e<this.receiveBuffer.length;e++)f.apply(this,this.receiveBuffer[e]);for(this.receiveBuffer=[],e=0;e<this.sendBuffer.length;e++)this.packet(this.sendBuffer[e]);this.sendBuffer=[]},r.prototype.ondisconnect=function(){u("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")},r.prototype.destroy=function(){if(this.subs){for(var e=0;e<this.subs.length;e++)this.subs[e].destroy();this.subs=null}this.io.destroy(this)},r.prototype.close=r.prototype.disconnect=function(){return this.connected&&(u("performing disconnect (%s)",this.nsp),this.packet({type:o.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this},r.prototype.compress=function(e){return this.flags=this.flags||{},this.flags.compress=e,this}},function(e,t,n){(function(t){function n(e){return t.Buffer&&t.Buffer.isBuffer(e)||t.ArrayBuffer&&e instanceof ArrayBuffer}e.exports=n}).call(t,n(0))},function(e,t,n){function r(e){var t="";do{t=a[e%c]+t,e=Math.floor(e/c)}while(e>0);return t}function o(e){var t=0;for(p=0;p<e.length;p++)t=t*c+u[e.charAt(p)];return t}function i(){var e=r(+new Date);return e!==s?(l=0,s=e):e+"."+r(l++)}for(var s,a="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),c=64,u={},l=0,p=0;p<c;p++)u[a[p]]=p;i.encode=r,i.decode=o,e.exports=i},function(e,t,n){function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(25),i=r(o),s=n(9),a=r(s);t.default={install:function(e,t,n){if(!t)throw new Error("[Vue-Socket.io] cannot locate connection");var r=new i.default(t,n);e.prototype.$socket=r.Socket,e.mixin({created:function(){var e=this,t=this.$options.sockets;this.$options.sockets=new Proxy({},{set:function(t,n,r){return a.default.addListener(n,r,e),t[n]=r,!0},deleteProperty:function(t,n){return a.default.removeListener(n,e.$options.sockets[n],e),delete t.key,!0}}),t&&Object.keys(t).forEach(function(n){e.$options.sockets[n]=t[n]})},beforeDestroy:function(){var e=this,t=this.$options.sockets;t&&Object.keys(t).forEach(function(t){delete e.$options.sockets[t]})}})}}},function(e,t){function n(e,t,n){function o(e,r){if(o.count<=0)throw new Error("after called too many times");--o.count,e?(i=!0,t(e),t=n):0!==o.count||i||t(null,r)}var i=!1;return n=n||r,o.count=e,0===e?t():o}function r(){}e.exports=n},function(e,t){e.exports=function(e,t,n){var r=e.byteLength;if(t=t||0,n=n||r,e.slice)return e.slice(t,n);if(t<0&&(t+=r),n<0&&(n+=r),n>r&&(n=r),t>=r||t>=n||0===r)return new ArrayBuffer(0);for(var o=new Uint8Array(e),i=new Uint8Array(n-t),s=t,a=0;s<n;s++,a++)i[a]=o[s];return i.buffer}},function(e,t,n){function r(e){return e&&e.__esModule?e:{default:e}}function o(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),a=n(9),c=r(a),u=n(40),l=r(u),p=function(){function e(t,n){i(this,e),this.Socket="string"==typeof t?(0,l.default)(t):t,n&&(this.store=n),this.onEvent()}return s(e,[{key:"onEvent",value:function(){var e=this,t=this.Socket.onevent;this.Socket.onevent=function(n){t.call(e.Socket,n),c.default.emit(n.data[0],n.data[1]),e.store&&e.passToStore("SOCKET_"+n.data[0],[].concat(o(n.data.slice(1))))};var n=this;["connect","error","disconnect","reconnect","reconnect_attempt","reconnecting","reconnect_error","reconnect_failed","connect_error","connect_timeout","connecting","ping","pong"].forEach(function(e){n.Socket.on(e,function(t){c.default.emit(e,t),n.store&&n.passToStore("SOCKET_"+e,t)})})}},{key:"passToStore",value:function(e,t){if(e.startsWith("SOCKET_")){for(var n in this.store._mutations)n.split("/").pop()===e.toUpperCase()&&this.store.commit(n,t);for(var r in this.store._actions){var o=r.split("/").pop();o.startsWith("socket_")&&o==="socket_"+e.toLowerCase().replace("SOCKET_","").replace(/[\W\s_]+(\w)/g,function(e,t){return t.toUpperCase()})&&this.store.dispatch(r,t)}}}}]),e}();t.default=p},function(e,t){function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},function(e,t){!function(){for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",n=new Uint8Array(256),r=0;r<e.length;r++)n[e.charCodeAt(r)]=r;t.encode=function(t){var n,r=new Uint8Array(t),o=r.length,i="";for(n=0;n<o;n+=3)i+=e[r[n]>>2],i+=e[(3&r[n])<<4|r[n+1]>>4],i+=e[(15&r[n+1])<<2|r[n+2]>>6],i+=e[63&r[n+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=function(e){var t,r,o,i,s,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);var l=new ArrayBuffer(a),p=new Uint8Array(l);for(t=0;t<c;t+=4)r=n[e.charCodeAt(t)],o=n[e.charCodeAt(t+1)],i=n[e.charCodeAt(t+2)],s=n[e.charCodeAt(t+3)],p[u++]=r<<2|o>>4,p[u++]=(15&o)<<4|i>>2,p[u++]=(3&i)<<6|63&s;return l}}()},function(e,t,n){(function(t){function n(e){for(var t=0;t<e.length;t++){var n=e[t];if(n.buffer instanceof ArrayBuffer){var r=n.buffer;if(n.byteLength!==r.byteLength){var o=new Uint8Array(n.byteLength);o.set(new Uint8Array(r,n.byteOffset,n.byteLength)),r=o.buffer}e[t]=r}}}function r(e,t){t=t||{};var r=new i;n(e);for(var o=0;o<e.length;o++)r.append(e[o]);return t.type?r.getBlob(t.type):r.getBlob()}function o(e,t){return n(e),new Blob(e,t||{})}var i=t.BlobBuilder||t.WebKitBlobBuilder||t.MSBlobBuilder||t.MozBlobBuilder,s=function(){try{return 2===new Blob(["hi"]).size}catch(e){return!1}}(),a=s&&function(){try{return 2===new Blob([new Uint8Array([1,2])]).size}catch(e){return!1}}(),c=i&&i.prototype.append&&i.prototype.getBlob;e.exports=function(){return s?a?t.Blob:o:c?r:void 0}()}).call(t,n(0))},function(e,t,n){function r(e){var n,r=0;for(n in e)r=(r<<5)-r+e.charCodeAt(n),r|=0;return t.colors[Math.abs(r)%t.colors.length]}function o(e){function n(){if(n.enabled){var e=n,r=+new Date,o=r-(u||r);e.diff=o,e.prev=u,e.curr=r,u=r;for(var i=new Array(arguments.length),s=0;s<i.length;s++)i[s]=arguments[s];i[0]=t.coerce(i[0]),"string"!=typeof i[0]&&i.unshift("%O");var a=0;i[0]=i[0].replace(/%([a-zA-Z%])/g,function(n,r){if("%%"===n)return n;a++;var o=t.formatters[r];if("function"==typeof o){var s=i[a];n=o.call(e,s),i.splice(a,1),a--}return n}),t.formatArgs.call(e,i),(n.log||t.log||console.log.bind(console)).apply(e,i)}}return n.namespace=e,n.enabled=t.enabled(e),n.useColors=t.useColors(),n.color=r(e),"function"==typeof t.init&&t.init(n),n}function i(e){t.save(e),t.names=[],t.skips=[];for(var n=("string"==typeof e?e:"").split(/[\s,]+/),r=n.length,o=0;o<r;o++)n[o]&&(e=n[o].replace(/\*/g,".*?"),"-"===e[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))}function s(){t.enable("")}function a(e){var n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1}function c(e){return e instanceof Error?e.stack||e.message:e}t=e.exports=o.debug=o.default=o,t.coerce=c,t.disable=s,t.enable=i,t.enabled=a,t.humanize=n(38),t.names=[],t.skips=[],t.formatters={};var u},function(e,t,n){e.exports=n(31),e.exports.parser=n(3)},function(e,t,n){(function(t){function r(e,n){if(!(this instanceof r))return new r(e,n);n=n||{},e&&"object"==typeof e&&(n=e,e=null),e?(e=l(e),n.hostname=e.host,n.secure="https"===e.protocol||"wss"===e.protocol,n.port=e.port,e.query&&(n.query=e.query)):n.host&&(n.hostname=l(n.host).host),this.secure=null!=n.secure?n.secure:t.location&&"https:"===location.protocol,n.hostname&&!n.port&&(n.port=this.secure?"443":"80"),this.agent=n.agent||!1,this.hostname=n.hostname||(t.location?location.hostname:"localhost"),this.port=n.port||(t.location&&location.port?location.port:this.secure?443:80),this.query=n.query||{},"string"==typeof this.query&&(this.query=p.decode(this.query)),this.upgrade=!1!==n.upgrade,this.path=(n.path||"/engine.io").replace(/\/$/,"")+"/",this.forceJSONP=!!n.forceJSONP,this.jsonp=!1!==n.jsonp,this.forceBase64=!!n.forceBase64,this.enablesXDR=!!n.enablesXDR,this.timestampParam=n.timestampParam||"t",this.timestampRequests=n.timestampRequests,this.transports=n.transports||["polling","websocket"],this.transportOptions=n.transportOptions||{},this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.policyPort=n.policyPort||843,this.rememberUpgrade=n.rememberUpgrade||!1,this.binaryType=null,this.onlyBinaryUpgrades=n.onlyBinaryUpgrades,this.perMessageDeflate=!1!==n.perMessageDeflate&&(n.perMessageDeflate||{}),!0===this.perMessageDeflate&&(this.perMessageDeflate={}),this.perMessageDeflate&&null==this.perMessageDeflate.threshold&&(this.perMessageDeflate.threshold=1024),this.pfx=n.pfx||null,this.key=n.key||null,this.passphrase=n.passphrase||null,this.cert=n.cert||null,this.ca=n.ca||null,this.ciphers=n.ciphers||null,this.rejectUnauthorized=void 0===n.rejectUnauthorized||n.rejectUnauthorized,this.forceNode=!!n.forceNode;var o="object"==typeof t&&t;o.global===o&&(n.extraHeaders&&Object.keys(n.extraHeaders).length>0&&(this.extraHeaders=n.extraHeaders),n.localAddress&&(this.localAddress=n.localAddress)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingIntervalTimer=null,this.pingTimeoutTimer=null,this.open()}function o(e){var t={};for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var i=n(11),s=n(2),a=n(1)("engine.io-client:socket"),c=n(14),u=n(3),l=n(16),p=n(5);e.exports=r,r.priorWebsocketSuccess=!1,s(r.prototype),r.protocol=u.protocol,r.Socket=r,r.Transport=n(6),r.transports=n(11),r.parser=n(3),r.prototype.createTransport=function(e){a('creating transport "%s"',e);var t=o(this.query);t.EIO=u.protocol,t.transport=e;var n=this.transportOptions[e]||{};return this.id&&(t.sid=this.id),new i[e]({query:t,socket:this,agent:n.agent||this.agent,hostname:n.hostname||this.hostname,port:n.port||this.port,secure:n.secure||this.secure,path:n.path||this.path,forceJSONP:n.forceJSONP||this.forceJSONP,jsonp:n.jsonp||this.jsonp,forceBase64:n.forceBase64||this.forceBase64,enablesXDR:n.enablesXDR||this.enablesXDR,timestampRequests:n.timestampRequests||this.timestampRequests,timestampParam:n.timestampParam||this.timestampParam,policyPort:n.policyPort||this.policyPort,pfx:n.pfx||this.pfx,key:n.key||this.key,passphrase:n.passphrase||this.passphrase,cert:n.cert||this.cert,ca:n.ca||this.ca,ciphers:n.ciphers||this.ciphers,rejectUnauthorized:n.rejectUnauthorized||this.rejectUnauthorized,perMessageDeflate:n.perMessageDeflate||this.perMessageDeflate,extraHeaders:n.extraHeaders||this.extraHeaders,forceNode:n.forceNode||this.forceNode,localAddress:n.localAddress||this.localAddress,requestTimeout:n.requestTimeout||this.requestTimeout,protocols:n.protocols||void 0})},r.prototype.open=function(){var e;if(this.rememberUpgrade&&r.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length){var t=this;return void setTimeout(function(){t.emit("error","No transports available")},0)}e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return this.transports.shift(),void this.open()}e.open(),this.setTransport(e)},r.prototype.setTransport=function(e){a("setting transport %s",e.name);var t=this;this.transport&&(a("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",function(){t.onDrain()}).on("packet",function(e){t.onPacket(e)}).on("error",function(e){t.onError(e)}).on("close",function(){t.onClose("transport close")})},r.prototype.probe=function(e){function t(){if(f.onlyBinaryUpgrades){var t=!this.supportsBinary&&f.transport.supportsBinary;p=p||t}p||(a('probe transport "%s" opened',e),l.send([{type:"ping",data:"probe"}]),l.once("packet",function(t){if(!p)if("pong"===t.type&&"probe"===t.data){if(a('probe transport "%s" pong',e),f.upgrading=!0,f.emit("upgrading",l),!l)return;r.priorWebsocketSuccess="websocket"===l.name,a('pausing current transport "%s"',f.transport.name),f.transport.pause(function(){p||"closed"!==f.readyState&&(a("changing transport and sending upgrade packet"),u(),f.setTransport(l),l.send([{type:"upgrade"}]),f.emit("upgrade",l),l=null,f.upgrading=!1,f.flush())})}else{a('probe transport "%s" failed',e);var n=new Error("probe error");n.transport=l.name,f.emit("upgradeError",n)}}))}function n(){p||(p=!0,u(),l.close(),l=null)}function o(t){var r=new Error("probe error: "+t);r.transport=l.name,n(),a('probe transport "%s" failed because of error: %s',e,t),f.emit("upgradeError",r)}function i(){o("transport closed")}function s(){o("socket closed")}function c(e){l&&e.name!==l.name&&(a('"%s" works - aborting "%s"',e.name,l.name),n())}function u(){l.removeListener("open",t),l.removeListener("error",o),l.removeListener("close",i),f.removeListener("close",s),f.removeListener("upgrading",c)}a('probing transport "%s"',e);var l=this.createTransport(e,{probe:1}),p=!1,f=this;r.priorWebsocketSuccess=!1,l.once("open",t),l.once("error",o),l.once("close",i),this.once("close",s),this.once("upgrading",c),l.open()},r.prototype.onOpen=function(){if(a("socket open"),this.readyState="open",r.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.upgrade&&this.transport.pause){a("starting upgrade probes");for(var e=0,t=this.upgrades.length;e<t;e++)this.probe(this.upgrades[e])}},r.prototype.onPacket=function(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(a('socket receive: type "%s", data "%s"',e.type,e.data),this.emit("packet",e),this.emit("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"pong":this.setPing(),this.emit("pong");break;case"error":var t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emit("data",e.data),this.emit("message",e.data)}else a('packet received with socket readyState "%s"',this.readyState)},r.prototype.onHandshake=function(e){this.emit("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&(this.setPing(),this.removeListener("heartbeat",this.onHeartbeat),this.on("heartbeat",this.onHeartbeat))},r.prototype.onHeartbeat=function(e){clearTimeout(this.pingTimeoutTimer);var t=this;t.pingTimeoutTimer=setTimeout(function(){"closed"!==t.readyState&&t.onClose("ping timeout")},e||t.pingInterval+t.pingTimeout)},r.prototype.setPing=function(){var e=this;clearTimeout(e.pingIntervalTimer),e.pingIntervalTimer=setTimeout(function(){a("writing ping packet - expecting pong within %sms",e.pingTimeout),e.ping(),e.onHeartbeat(e.pingTimeout)},e.pingInterval)},r.prototype.ping=function(){var e=this;this.sendPacket("ping",function(){e.emit("ping")})},r.prototype.onDrain=function(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()},r.prototype.flush=function(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(a("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))},r.prototype.write=r.prototype.send=function(e,t,n){return this.sendPacket("message",e,t,n),this},r.prototype.sendPacket=function(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"!==this.readyState&&"closed"!==this.readyState){n=n||{},n.compress=!1!==n.compress;var o={type:e,data:t,options:n};this.emit("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}},r.prototype.close=function(){function e(){r.onClose("forced close"),a("socket closing - telling transport to close"),r.transport.close()}function t(){r.removeListener("upgrade",t),r.removeListener("upgradeError",t),e()}function n(){r.once("upgrade",t),
r.once("upgradeError",t)}if("opening"===this.readyState||"open"===this.readyState){this.readyState="closing";var r=this;this.writeBuffer.length?this.once("drain",function(){this.upgrading?n():e()}):this.upgrading?n():e()}return this},r.prototype.onError=function(e){a("socket error %j",e),r.priorWebsocketSuccess=!1,this.emit("error",e),this.onClose("transport error",e)},r.prototype.onClose=function(e,t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState){a('socket close with reason: "%s"',e);var n=this;clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),this.readyState="closed",this.id=null,this.emit("close",e,t),n.writeBuffer=[],n.prevBufferLen=0}},r.prototype.filterUpgrades=function(e){for(var t=[],n=0,r=e.length;n<r;n++)~c(this.transports,e[n])&&t.push(e[n]);return t}}).call(t,n(0))},function(e,t,n){(function(t){function r(){}function o(e){i.call(this,e),this.query=this.query||{},a||(t.___eio||(t.___eio=[]),a=t.___eio),this.index=a.length;var n=this;a.push(function(e){n.onData(e)}),this.query.j=this.index,t.document&&t.addEventListener&&t.addEventListener("beforeunload",function(){n.script&&(n.script.onerror=r)},!1)}var i=n(12),s=n(4);e.exports=o;var a,c=/\n/g,u=/\\n/g;s(o,i),o.prototype.supportsBinary=!1,o.prototype.doClose=function(){this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),i.prototype.doClose.call(this)},o.prototype.doPoll=function(){var e=this,t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=function(t){e.onError("jsonp poll error",t)};var n=document.getElementsByTagName("script")[0];n?n.parentNode.insertBefore(t,n):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout(function(){var e=document.createElement("iframe");document.body.appendChild(e),document.body.removeChild(e)},100)},o.prototype.doWrite=function(e,t){function n(){r(),t()}function r(){if(o.iframe)try{o.form.removeChild(o.iframe)}catch(e){o.onError("jsonp polling iframe removal error",e)}try{var e='<iframe src="javascript:0" name="'+o.iframeId+'">';i=document.createElement(e)}catch(e){i=document.createElement("iframe"),i.name=o.iframeId,i.src="javascript:0"}i.id=o.iframeId,o.form.appendChild(i),o.iframe=i}var o=this;if(!this.form){var i,s=document.createElement("form"),a=document.createElement("textarea"),l=this.iframeId="eio_iframe_"+this.index;s.className="socketio",s.style.position="absolute",s.style.top="-1000px",s.style.left="-1000px",s.target=l,s.method="POST",s.setAttribute("accept-charset","utf-8"),a.name="d",s.appendChild(a),document.body.appendChild(s),this.form=s,this.area=a}this.form.action=this.uri(),r(),e=e.replace(u,"\\\n"),this.area.value=e.replace(c,"\\n");try{this.form.submit()}catch(e){}this.iframe.attachEvent?this.iframe.onreadystatechange=function(){"complete"===o.iframe.readyState&&n()}:this.iframe.onload=n}}).call(t,n(0))},function(e,t,n){(function(t){function r(){}function o(e){if(c.call(this,e),this.requestTimeout=e.requestTimeout,this.extraHeaders=e.extraHeaders,t.location){var n="https:"===location.protocol,r=location.port;r||(r=n?443:80),this.xd=e.hostname!==t.location.hostname||r!==e.port,this.xs=e.secure!==n}}function i(e){this.method=e.method||"GET",this.uri=e.uri,this.xd=!!e.xd,this.xs=!!e.xs,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.agent=e.agent,this.isBinary=e.isBinary,this.supportsBinary=e.supportsBinary,this.enablesXDR=e.enablesXDR,this.requestTimeout=e.requestTimeout,this.pfx=e.pfx,this.key=e.key,this.passphrase=e.passphrase,this.cert=e.cert,this.ca=e.ca,this.ciphers=e.ciphers,this.rejectUnauthorized=e.rejectUnauthorized,this.extraHeaders=e.extraHeaders,this.create()}function s(){for(var e in i.requests)i.requests.hasOwnProperty(e)&&i.requests[e].abort()}var a=n(7),c=n(12),u=n(2),l=n(4),p=n(1)("engine.io-client:polling-xhr");e.exports=o,e.exports.Request=i,l(o,c),o.prototype.supportsBinary=!0,o.prototype.request=function(e){return e=e||{},e.uri=this.uri(),e.xd=this.xd,e.xs=this.xs,e.agent=this.agent||!1,e.supportsBinary=this.supportsBinary,e.enablesXDR=this.enablesXDR,e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized,e.requestTimeout=this.requestTimeout,e.extraHeaders=this.extraHeaders,new i(e)},o.prototype.doWrite=function(e,t){var n="string"!=typeof e&&void 0!==e,r=this.request({method:"POST",data:e,isBinary:n}),o=this;r.on("success",t),r.on("error",function(e){o.onError("xhr post error",e)}),this.sendXhr=r},o.prototype.doPoll=function(){p("xhr poll");var e=this.request(),t=this;e.on("data",function(e){t.onData(e)}),e.on("error",function(e){t.onError("xhr poll error",e)}),this.pollXhr=e},u(i.prototype),i.prototype.create=function(){var e={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};e.pfx=this.pfx,e.key=this.key,e.passphrase=this.passphrase,e.cert=this.cert,e.ca=this.ca,e.ciphers=this.ciphers,e.rejectUnauthorized=this.rejectUnauthorized;var n=this.xhr=new a(e),r=this;try{p("xhr open %s: %s",this.method,this.uri),n.open(this.method,this.uri,this.async);try{if(this.extraHeaders){n.setDisableHeaderCheck&&n.setDisableHeaderCheck(!0);for(var o in this.extraHeaders)this.extraHeaders.hasOwnProperty(o)&&n.setRequestHeader(o,this.extraHeaders[o])}}catch(e){}if("POST"===this.method)try{this.isBinary?n.setRequestHeader("Content-type","application/octet-stream"):n.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{n.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in n&&(n.withCredentials=!0),this.requestTimeout&&(n.timeout=this.requestTimeout),this.hasXDR()?(n.onload=function(){r.onLoad()},n.onerror=function(){r.onError(n.responseText)}):n.onreadystatechange=function(){if(2===n.readyState){var e;try{e=n.getResponseHeader("Content-Type")}catch(e){}"application/octet-stream"===e&&(n.responseType="arraybuffer")}4===n.readyState&&(200===n.status||1223===n.status?r.onLoad():setTimeout(function(){r.onError(n.status)},0))},p("xhr data %s",this.data),n.send(this.data)}catch(e){return void setTimeout(function(){r.onError(e)},0)}t.document&&(this.index=i.requestsCount++,i.requests[this.index]=this)},i.prototype.onSuccess=function(){this.emit("success"),this.cleanup()},i.prototype.onData=function(e){this.emit("data",e),this.onSuccess()},i.prototype.onError=function(e){this.emit("error",e),this.cleanup(!0)},i.prototype.cleanup=function(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=r:this.xhr.onreadystatechange=r,e)try{this.xhr.abort()}catch(e){}t.document&&delete i.requests[this.index],this.xhr=null}},i.prototype.onLoad=function(){var e;try{var t;try{t=this.xhr.getResponseHeader("Content-Type")}catch(e){}e="application/octet-stream"===t?this.xhr.response||this.xhr.responseText:this.xhr.responseText}catch(e){this.onError(e)}null!=e&&this.onData(e)},i.prototype.hasXDR=function(){return void 0!==t.XDomainRequest&&!this.xs&&this.enablesXDR},i.prototype.abort=function(){this.cleanup()},i.requestsCount=0,i.requests={},t.document&&(t.attachEvent?t.attachEvent("onunload",s):t.addEventListener&&t.addEventListener("beforeunload",s,!1))}).call(t,n(0))},function(e,t,n){(function(t){function r(e){e&&e.forceBase64&&(this.supportsBinary=!1),this.perMessageDeflate=e.perMessageDeflate,this.usingBrowserWebSocket=p&&!e.forceNode,this.protocols=e.protocols,this.usingBrowserWebSocket||(f=o),i.call(this,e)}var o,i=n(6),s=n(3),a=n(5),c=n(4),u=n(21),l=n(1)("engine.io-client:websocket"),p=t.WebSocket||t.MozWebSocket;if("undefined"==typeof window)try{o=n(45)}catch(e){}var f=p;f||"undefined"!=typeof window||(f=o),e.exports=r,c(r,i),r.prototype.name="websocket",r.prototype.supportsBinary=!0,r.prototype.doOpen=function(){if(this.check()){var e=this.uri(),t=this.protocols,n={agent:this.agent,perMessageDeflate:this.perMessageDeflate};n.pfx=this.pfx,n.key=this.key,n.passphrase=this.passphrase,n.cert=this.cert,n.ca=this.ca,n.ciphers=this.ciphers,n.rejectUnauthorized=this.rejectUnauthorized,this.extraHeaders&&(n.headers=this.extraHeaders),this.localAddress&&(n.localAddress=this.localAddress);try{this.ws=this.usingBrowserWebSocket?t?new f(e,t):new f(e):new f(e,t,n)}catch(e){return this.emit("error",e)}void 0===this.ws.binaryType&&(this.supportsBinary=!1),this.ws.supports&&this.ws.supports.binary?(this.supportsBinary=!0,this.ws.binaryType="nodebuffer"):this.ws.binaryType="arraybuffer",this.addEventListeners()}},r.prototype.addEventListeners=function(){var e=this;this.ws.onopen=function(){e.onOpen()},this.ws.onclose=function(){e.onClose()},this.ws.onmessage=function(t){e.onData(t.data)},this.ws.onerror=function(t){e.onError("websocket error",t)}},r.prototype.write=function(e){function n(){r.emit("flush"),setTimeout(function(){r.writable=!0,r.emit("drain")},0)}var r=this;this.writable=!1;for(var o=e.length,i=0,a=o;i<a;i++)!function(e){s.encodePacket(e,r.supportsBinary,function(i){if(!r.usingBrowserWebSocket){var s={};e.options&&(s.compress=e.options.compress),r.perMessageDeflate&&("string"==typeof i?t.Buffer.byteLength(i):i.length)<r.perMessageDeflate.threshold&&(s.compress=!1)}try{r.usingBrowserWebSocket?r.ws.send(i):r.ws.send(i,s)}catch(e){l("websocket closed before onclose event")}--o||n()})}(e[i])},r.prototype.onClose=function(){i.prototype.onClose.call(this)},r.prototype.doClose=function(){void 0!==this.ws&&this.ws.close()},r.prototype.uri=function(){var e=this.query||{},t=this.secure?"wss":"ws",n="";return this.port&&("wss"===t&&443!==Number(this.port)||"ws"===t&&80!==Number(this.port))&&(n=":"+this.port),this.timestampRequests&&(e[this.timestampParam]=u()),this.supportsBinary||(e.b64=1),e=a.encode(e),e.length&&(e="?"+e),t+"://"+(-1!==this.hostname.indexOf(":")?"["+this.hostname+"]":this.hostname)+n+this.path+e},r.prototype.check=function(){return!(!f||"__initialize"in f&&this.name===r.prototype.name)}}).call(t,n(0))},function(e,t){e.exports=Object.keys||function(e){var t=[],n=Object.prototype.hasOwnProperty;for(var r in e)n.call(e,r)&&t.push(r);return t}},function(e,t,n){(function(e,r){var o;!function(r){function i(e){for(var t,n,r=[],o=0,i=e.length;o<i;)t=e.charCodeAt(o++),t>=55296&&t<=56319&&o<i?(n=e.charCodeAt(o++),56320==(64512&n)?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--)):r.push(t);return r}function s(e){for(var t,n=e.length,r=-1,o="";++r<n;)t=e[r],t>65535&&(t-=65536,o+=y(t>>>10&1023|55296),t=56320|1023&t),o+=y(t);return o}function a(e,t){if(e>=55296&&e<=57343){if(t)throw Error("Lone surrogate U+"+e.toString(16).toUpperCase()+" is not a scalar value");return!1}return!0}function c(e,t){return y(e>>t&63|128)}function u(e,t){if(0==(4294967168&e))return y(e);var n="";return 0==(4294965248&e)?n=y(e>>6&31|192):0==(4294901760&e)?(a(e,t)||(e=65533),n=y(e>>12&15|224),n+=c(e,6)):0==(4292870144&e)&&(n=y(e>>18&7|240),n+=c(e,12),n+=c(e,6)),n+=y(63&e|128)}function l(e,t){t=t||{};for(var n,r=!1!==t.strict,o=i(e),s=o.length,a=-1,c="";++a<s;)n=o[a],c+=u(n,r);return c}function p(){if(m>=v)throw Error("Invalid byte index");var e=255&h[m];if(m++,128==(192&e))return 63&e;throw Error("Invalid continuation byte")}function f(e){var t,n,r,o,i;if(m>v)throw Error("Invalid byte index");if(m==v)return!1;if(t=255&h[m],m++,0==(128&t))return t;if(192==(224&t)){if(n=p(),(i=(31&t)<<6|n)>=128)return i;throw Error("Invalid continuation byte")}if(224==(240&t)){if(n=p(),r=p(),(i=(15&t)<<12|n<<6|r)>=2048)return a(i,e)?i:65533;throw Error("Invalid continuation byte")}if(240==(248&t)&&(n=p(),r=p(),o=p(),(i=(7&t)<<18|n<<12|r<<6|o)>=65536&&i<=1114111))return i;throw Error("Invalid UTF-8 detected")}function d(e,t){t=t||{};var n=!1!==t.strict;h=i(e),v=h.length,m=0;for(var r,o=[];!1!==(r=f(n));)o.push(r);return s(o)}var h,v,m,y=("object"==typeof e&&e&&e.exports,String.fromCharCode),g={version:"2.1.2",encode:l,decode:d};void 0!==(o=function(){return g}.call(t,n,t,e))&&(e.exports=o)}()}).call(t,n(44)(e),n(0))},function(e,t){try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},function(e,t){function n(e){if(e=String(e),!(e.length>100)){var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(t){var n=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return n*l;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"hrs":case"hr":case"h":return n*c;case"minutes":case"minute":case"mins":case"min":case"m":return n*a;case"seconds":case"second":case"secs":case"sec":case"s":return n*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n;default:return}}}}function r(e){return e>=u?Math.round(e/u)+"d":e>=c?Math.round(e/c)+"h":e>=a?Math.round(e/a)+"m":e>=s?Math.round(e/s)+"s":e+"ms"}function o(e){return i(e,u,"day")||i(e,c,"hour")||i(e,a,"minute")||i(e,s,"second")||e+" ms"}function i(e,t,n){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+n:Math.ceil(e/t)+" "+n+"s"}var s=1e3,a=60*s,c=60*a,u=24*c,l=365.25*u;e.exports=function(e,t){t=t||{};var i=typeof e;if("string"===i&&e.length>0)return n(e);if("number"===i&&!1===isNaN(e))return t.long?o(e):r(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function r(){throw new Error("clearTimeout has not been defined")}function o(e){if(l===setTimeout)return setTimeout(e,0);if((l===n||!l)&&setTimeout)return l=setTimeout,setTimeout(e,0);try{return l(e,0)}catch(t){try{return l.call(null,e,0)}catch(t){return l.call(this,e,0)}}}function i(e){if(p===clearTimeout)return clearTimeout(e);if((p===r||!p)&&clearTimeout)return p=clearTimeout,clearTimeout(e);try{return p(e)}catch(t){try{return p.call(null,e)}catch(t){return p.call(this,e)}}}function s(){v&&d&&(v=!1,d.length?h=d.concat(h):m=-1,h.length&&a())}function a(){if(!v){var e=o(s);v=!0;for(var t=h.length;t;){for(d=h,h=[];++m<t;)d&&d[m].run();m=-1,t=h.length}d=null,v=!1,i(e)}}function c(e,t){this.fun=e,this.array=t}function u(){}var l,p,f=e.exports={};!function(){try{l="function"==typeof setTimeout?setTimeout:n}catch(e){l=n}try{p="function"==typeof clearTimeout?clearTimeout:r}catch(e){p=r}}();var d,h=[],v=!1,m=-1;f.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];h.push(new c(e,t)),1!==h.length||v||o(a)},c.prototype.run=function(){this.fun.apply(null,this.array)},f.title="browser",f.browser=!0,f.env={},f.argv=[],f.version="",f.versions={},f.on=u,f.addListener=u,f.once=u,f.off=u,f.removeListener=u,f.removeAllListeners=u,f.emit=u,f.prependListener=u,f.prependOnceListener=u,f.listeners=function(e){return[]},f.binding=function(e){throw new Error("process.binding is not supported")},f.cwd=function(){return"/"},f.chdir=function(e){throw new Error("process.chdir is not supported")},f.umask=function(){return 0}},function(e,t,n){function r(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,r=o(e),i=r.source,u=r.id,l=r.path,p=c[u]&&l in c[u].nsps;return t.forceNew||t["force new connection"]||!1===t.multiplex||p?(a("ignoring socket cache for %s",i),n=s(i,t)):(c[u]||(a("new io instance for %s",i),c[u]=s(i,t)),n=c[u]),r.query&&!t.query&&(t.query=r.query),n.socket(r.path,t)}var o=n(41),i=n(8),s=n(17),a=n(1)("socket.io-client");e.exports=t=r;var c=t.managers={};t.protocol=i.protocol,t.connect=r,t.Manager=n(17),t.Socket=n(19)},function(e,t,n){(function(t){function r(e,n){var r=e;n=n||t.location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(i("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),i("parse %s",e),r=o(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";var s=-1!==r.host.indexOf(":"),a=s?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+a+":"+r.port,r.href=r.protocol+"://"+a+(n&&n.port===r.port?"":":"+r.port),r}var o=n(16),i=n(1)("socket.io-client:url");e.exports=r}).call(t,n(0))},function(e,t,n){(function(e){function r(e,t){if(!e)return e;if(s(e)){var n={_placeholder:!0,num:t.length};return t.push(e),n}if(i(e)){for(var o=new Array(e.length),a=0;a<e.length;a++)o[a]=r(e[a],t);return o}if("object"==typeof e&&!(e instanceof Date)){var o={};for(var c in e)o[c]=r(e[c],t);return o}return e}function o(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(i(e))for(var n=0;n<e.length;n++)e[n]=o(e[n],t);else if("object"==typeof e)for(var r in e)e[r]=o(e[r],t);return e}var i=n(15),s=n(20),a=Object.prototype.toString,c="function"==typeof e.Blob||"[object BlobConstructor]"===a.call(e.Blob),u="function"==typeof e.File||"[object FileConstructor]"===a.call(e.File);t.deconstructPacket=function(e){var t=[],n=e.data,o=e;return o.data=r(n,t),o.attachments=t.length,{packet:o,buffers:t}},t.reconstructPacket=function(e,t){return e.data=o(e.data,t),e.attachments=void 0,e},t.removeBlobs=function(e,t){function n(e,a,l){if(!e)return e;if(c&&e instanceof Blob||u&&e instanceof File){r++;var p=new FileReader;p.onload=function(){l?l[a]=this.result:o=this.result,--r||t(o)},p.readAsArrayBuffer(e)}else if(i(e))for(var f=0;f<e.length;f++)n(e[f],f,e);else if("object"==typeof e&&!s(e))for(var d in e)n(e[d],d,e)}var r=0,o=e;n(o),r||t(o)}}).call(t,n(0))},function(e,t){function n(e,t){var n=[];t=t||0;for(var r=t||0;r<e.length;r++)n[r-t]=e[r];return n}e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){},function(e,t,n){e.exports=n(22)}])}()}()}),f=e(p);o.use(f,"http://frontend-test-server.prmrgt.com/"),new o({el:"#app",components:{app:l}})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
